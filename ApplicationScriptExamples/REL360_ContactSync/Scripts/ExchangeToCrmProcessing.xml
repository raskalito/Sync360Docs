<script>
	<sandbox>

		<!--              CONFIGURATION SECTION                   -->
		<set var="ManualMode">{false}</set><!--USE FOR DEVELOPMENT/MANUAL DEBUG-->

		<if condition="!Context.isSet">
			<!--<var Employee='["EmployeeId" : (Input.ObjectId ?? "C13F9369-3C33-E811-841E-000C295CA5D3")]'/>-->
			
			
			
			<var Employee='["EmployeeId" : (Input.ObjectId ?? "58441ca8-9550-ee11-be6f-000d3a34ec2a")]'/> <!--s2s-->
			<var Employee='["EmployeeId" : (Input.ObjectId ?? "64135570-9550-ee11-be6f-000d3a34ec2a")]'/> <!--cole-->
			
			<var Employee='["EmployeeId" : (Input.ObjectId ?? "3205a681-bbc0-ec11-983e-0022480a27f1")]'/> <!--att3-->
			<var Employee='["EmployeeId" : (Input.ObjectId ?? "a563aa50-48ac-ec11-983f-0022480ace83")]'/>
			<var Employee='["EmployeeId" : (Input.ObjectId ?? "d6f4805e-06aa-ec11-983f-0022480ace83")]'/>
			<!--<var Employee='["EmployeeId" : (Input.ObjectId ?? "d6f4805e-06aa-ec11-983f-0022480ace83")]'/>-->
			<!--REL360 BOX-->
			<include name="InitializeContext"/>
		</if>
		<!--              CONFIGURATION END                       -->


		<exception if="!Context.isSet">Context parameter is required.</exception>


		<set var="CriticalErrorOccured">{false}</set>
		<set var="currentRunDate">{Utils.Now.ToUniversalTime()}</set>
		<set var="Employee">{Context.Employee}</set>

		<set var="SHA256">{static "System.Security.Cryptography.SHA256"}</set>
		<set var="instSHA256">{SHA256.Create()}</set>

		<log/>
		<log>Create new contacts in Crm from Exchange for Employee {Employee.Email} ({Employee.Id}) started.</log>
		<log/>

		<set var="Mapping">{Context.Mapping}</set>
		<set var="Settings">{Context.Settings}</set>
		<set var="PrivateFields">{Context.PrivateFields}</set>
		<set var="BlockLists">{Context.BlockLists}</set>

		<set var="OnboardingSettings">{Input.OnboardingSettings ?? null}</set>
		<set var="OnboardingMode">{OnboardingSettings.isSet}</set>
		<set var="UseStats">{OnboardingSettings.WeightStats.Count gt 0 ?? false}</set>

		<set var="IsRunAllowed">{true}</set>

		<if condition="OnboardingMode">
			<then>
				<log>Script is working in Onboarding mode.</log>
				<set var="IsRunAllowed">{true}</set>
			</then>
			<else>
				<log if="!Settings.ContactSyncEnabled">Contacts Sync is Disabled in Settings.</log>
				<log if="!Settings.DeployedApps.ContactSync">ContactSync is not active in DeployedApps setting.</log>
				
				<if condition="Settings.DeployedApps.Onboarding">
					<log if="Settings.OnboardingRequestedSyncStop">Contacts Sync is Disabled by Onboarding.</log>
                    <log if="!Employee.IsRolloutCompleted">Employee is waiting for Onboarding.</log>
                </if>
				
				<set var="IsRunAllowed">{
					Settings.ContactSyncEnabled 
					and (Settings.DeployedApps.Onboarding ? (Employee.IsRolloutCompleted and !Settings.OnboardingRequestedSyncStop) : true)  
					and Settings.DeployedApps.ContactSync}</set>
			</else>
		</if>

		<set var="IsRunAllowed" if="ManualMode">{true}</set>
		<if condition="IsRunAllowed">
			
			<!--administrator context is required for operations with relationships with private fields--> 
			<set var="RelationshipsExecutionContext">{Settings.PrivateFieldsEnabled ? "" : Employee.UserId}</set>
			
			<set var="CrmExecutionContext">{Employee.UserId}</set>
			<set var="CrmExecutionContext" if="OnboardingMode"></set>

			<context for="crm" user="{CrmExecutionContext}">
				<context for="exchange" user="{Employee.Email}">
					
					<if condition="Settings.UsePaging">
						<then>
							<set var="exchangeContacts">{new List()}</set>
							<set var="Continue">{true}</set>
							<set var="Page">{0}</set>
							<while condition="Continue">
								<set var="badRecordsCount">{0}</set>
								<sandbox>
									<select from="exchange" entity="contact" var="tempContacts" page="Page" count="Settings.PageSize">
										<where>
											<if condition="Settings.SyncMainFolderOnly eq false">
												<condition attr="parententryid" op="ne">deleteditems</condition>
												<condition attr="@FolderName" op="eq">root/allitems</condition>
												<if condition="Settings.OutlookFolder.isSet and Settings.OutlookFolder ne ''">
													<condition attr="parententryid" op="ne">{Settings.OutlookFolder}</condition>
												</if>
											</if>
											<condition attr="@BodyResponseType" op="eq">Text</condition>

											<if condition="!OnboardingMode">
												<condition attr="lastmodifieddate" op="ge">{Employee.LastCreationDate.ToString("yyyy-MM-ddTHH:mm:ssZ")}</condition>
											</if>


											<for var="outCategory" in="Settings.OptOutCategories">
												<not>
													<condition attr="Keywords" op="eq">{outCategory}</condition>
												</not>
											</for>

											<or>
												<condition attr="sensitivity" op="ne">{2}</condition>
												<not>
													<condition attr="sensitivity" op="ex"/>
												</not>
											</or>


											<or>
												<not>
													<condition attr="crmid" op="ex"/>
												</not>
												<condition attr="crmid" op="eq"></condition>

												<if condition="Settings.ManualSyncCategory.isSet">
													<condition attr="Keywords" op="eq">{Settings.ManualSyncCategory}</condition>
												</if>
											</or>
											
											<if condition="!OnboardingMode">
												<or>
													<not>
														<!-- <condition attr="crmLinkState" op="ex"></condition> -->
														<condition attr="crmLinkState_vs360" op="ex"/>
													</not>
													<!-- <condition attr="crmLinkState" op="eq">{1}</condition> -->
													<condition attr="crmLinkState_vs360" op="eq">{1}</condition>

													<if condition="Settings.ManualSyncCategory.isSet">
														<condition attr="Keywords" op="eq">{Settings.ManualSyncCategory}</condition>
													</if>
												</or>
											</if>
											<include name="AdditionalConditions"/>
										</where>
										<for var="mapping" in="Mapping.ContactMapping">
											<attr name="{mapping.Exchange}" unless="mapping.Multiline.isSet"/>
										</for>
										<for var="mapping" in="Mapping.ContactMultiLineMapping">
											<attr name="{mapping.Exchange}"/>
										</for>
										<attr name="EntryId"/>
										<attr name="email1displayname"/>
										<attr name="email2address"/>
										<attr name="email2displayname"/>
										<attr name="email3address"/>
										<attr name="email3displayname"/>
										<attr name="companyname"/>
										<!-- <attr name="crmLinkState"/> -->
										<attr name="crmLinkState_vs360"/>
										<attr name="lastmodifieddate"/>
										<attr name="lastcommitdate"/>
										<attr name="crmid"/>
										<attr name="Keywords"/>
										<attr name="hasattachments"/>
										<attr name="attachments"/>
										<attr name="itemid"/>
									</select>
									<log>{tempContacts.Count} Exchange Contacts retrieved.</log><!-- Used to trigger onerror logic -->
									<onerror var="ex">
										<set var="tempContacts">{new List()}</set>
										<for var="k" from="Page*Settings.PageSize+1" to="(Page+1)*Settings.PageSize" step="1">
											<sandbox>
												<select from="exchange" entity="contact" var="list" page="k" count="1">
													<where>
														<if condition="Settings.SyncMainFolderOnly eq false">
															<condition attr="parententryid" op="ne">deleteditems</condition>
															<condition attr="@FolderName" op="eq">root/allitems</condition>
															<if condition="Settings.OutlookFolder.isSet and Settings.OutlookFolder ne ''">
																<condition attr="parententryid" op="ne">{Settings.OutlookFolder}</condition>
															</if>
														</if>
														<condition attr="@BodyResponseType" op="eq">Text</condition>

														<if condition="!OnboardingMode">
															<condition attr="lastmodifieddate" op="ge">{Employee.LastCreationDate.ToString("yyyy-MM-ddTHH:mm:ssZ")}</condition>
														</if>


														<for var="outCategory" in="Settings.OptOutCategories">
															<not>
																<condition attr="Keywords" op="eq">{outCategory}</condition>
															</not>
														</for>

														<or>
															<condition attr="sensitivity" op="ne">{2}</condition>
															<not>
																<condition attr="sensitivity" op="ex"/>
															</not>
														</or>


														<or>
															<not>
																<condition attr="crmid" op="ex"/>
															</not>
															<condition attr="crmid" op="eq"></condition>

															<if condition="Settings.ManualSyncCategory.isSet">
																<condition attr="Keywords" op="eq">{Settings.ManualSyncCategory}</condition>
															</if>
														</or>
														
														<if condition="!OnboardingMode">
															<or>
																<not>
																	<!-- <condition attr="crmLinkState" op="ex"></condition> -->
																	<condition attr="crmLinkState_vs360" op="ex"/>
																</not>
																<!-- <condition attr="crmLinkState" op="eq">{1}</condition> -->
																<condition attr="crmLinkState_vs360" op="eq">{1}</condition>

																<if condition="Settings.ManualSyncCategory.isSet">
																	<condition attr="Keywords" op="eq">{Settings.ManualSyncCategory}</condition>
																</if>
															</or>
														</if>
														<include name="AdditionalConditions"/>
													</where>
													<for var="mapping" in="Mapping.ContactMapping">
														<attr name="{mapping.Exchange}" unless="mapping.Multiline.isSet"/>
													</for>
													<for var="mapping" in="Mapping.ContactMultiLineMapping">
														<attr name="{mapping.Exchange}"/>
													</for>
													<attr name="EntryId"/>
													<attr name="email1displayname"/>
													<attr name="email2address"/>
													<attr name="email2displayname"/>
													<attr name="email3address"/>
													<attr name="email3displayname"/>
													<attr name="companyname"/>
													<!-- <attr name="crmLinkState"/> -->
													<attr name="crmLinkState_vs360"/>
													<attr name="lastmodifieddate"/>
													<attr name="lastcommitdate"/>
													<attr name="crmid"/>
													<attr name="Keywords"/>
													<attr name="hasattachments"/>
													<attr name="attachments"/>
													<attr name="itemid"/>
												</select>

												<set if="list.isSet and list.Count ne 0" var="tempContacts[]">{list[0]}</set>
												<break if="list.Count eq 0"/>
												<onerror>
													<set var="badRecordsCount">{badRecordsCount + 1}</set>
												</onerror>
											</sandbox>
										</for>
									</onerror>
								</sandbox>
								<for var="contact" in="tempContacts">
									<set var="exchangeContacts[]">{contact}</set>
								</for>
								<set var="Page">{Page + 1}</set>
								<set var="Continue" if="(tempContacts.Count + badRecordsCount) lt Settings.PageSize">{false}</set>
							</while>
							<log unless="exchangeContacts.Count eq 0">Total contacts for creation: {exchangeContacts.Count}</log>
							<log if="exchangeContacts.Count eq 0">Nothing to create, no contacts were found</log>
						</then>
						<else>
							<select from="exchange" entity="contact" var="exchangeContacts">
								<where>
									<if condition="Settings.SyncMainFolderOnly eq false">
										<condition attr="parententryid" op="ne">deleteditems</condition>
										<condition attr="@FolderName" op="eq">root/allitems</condition>
										<if condition="Settings.OutlookFolder.isSet and Settings.OutlookFolder ne ''">
											<condition attr="parententryid" op="ne">{Settings.OutlookFolder}</condition>
										</if>
									</if>
									<condition attr="@BodyResponseType" op="eq">Text</condition>

									<if condition="!OnboardingMode">
										<condition attr="lastmodifieddate" op="ge">{Employee.LastCreationDate.ToString("yyyy-MM-ddTHH:mm:ssZ")}</condition>
									</if>


									<for var="outCategory" in="Settings.OptOutCategories">
										<not>
											<condition attr="Keywords" op="eq">{outCategory}</condition>
										</not>
									</for>

									<or>
										<condition attr="sensitivity" op="ne">{2}</condition>
										<not>
											<condition attr="sensitivity" op="ex"/>
										</not>
									</or>


									<or>
										<not>
											<condition attr="crmid" op="ex"/>
										</not>
										
										<condition attr="crmid" op="eq"></condition>
										
										<if condition="Settings.ManualSyncCategory.isSet">
											<condition attr="Keywords" op="eq">{Settings.ManualSyncCategory}</condition>
										</if>
									</or>
									
									<if condition="!OnboardingMode">
										<or>
											<not>
												<!-- <condition attr="crmLinkState" op="ex"></condition> -->
												<condition attr="crmLinkState_vs360" op="ex"/>
											</not>
											<!-- <condition attr="crmLinkState" op="eq">{1}</condition> -->
											<condition attr="crmLinkState_vs360" op="eq">{1}</condition>

											<if condition="Settings.ManualSyncCategory.isSet">
												<condition attr="Keywords" op="eq">{Settings.ManualSyncCategory}</condition>
											</if>
										</or>
									</if>
									<include name="AdditionalConditions"/>
								</where>
								<for var="mapping" in="Mapping.ContactMapping">
									<attr name="{mapping.Exchange}" unless="mapping.Multiline.isSet"/>
								</for>
								<for var="mapping" in="Mapping.ContactMultiLineMapping">
									<attr name="{mapping.Exchange}"/>
								</for>
								<attr name="EntryId"/>
								<attr name="email1displayname"/>
								<attr name="email2address"/>
								<attr name="email2displayname"/>
								<attr name="email3address"/>
								<attr name="email3displayname"/>
								<attr name="companyname"/>
								<!-- <attr name="crmLinkState"/> -->
								<attr name="crmLinkState_vs360"/>
								<attr name="lastmodifieddate"/>
								<attr name="lastcommitdate"/>
								<attr name="crmid"/>
								<attr name="Keywords"/>
								<attr name="hasattachments"/>
								<attr name="attachments"/>
								<attr name="itemid"/>
							</select>

							<log unless="exchangeContacts.Length eq 0">Total contacts for creation: {exchangeContacts.Length}</log>
							<log if="exchangeContacts.Length eq 0">Nothing to create, no contacts were found</log>
						</else>
					</if>


					<for var="ec" in="exchangeContacts">
						<sandbox>
							<log if="Settings.ExtendedLog eq '1'">Exchange contact {ec}</log>
							
							<set var="skip">{false}</set>
							<set ValidationResult="new Object()" 
								 ValidationResult.isInvalid="false"/>
								 
							<ProcessX500Emailaddress
								exContact="ec"
								Output="ValidationResult"/>

							<if condition="ValidationResult.isInvalid">
								<log>Email is Invalid. Skipping...</log>
								<continue/>
							</if>

							<log>Processing {ec.email1address}...</log>
							
							<log>Starting Duplicates Search</log>

							<!--digits only Phones-->
							<var CallObject='new Object()'/>
							<set var="CallObject.ValueToHandle">{ec.mobilephone ?? null}</set>
							<call name="GetNumericOnlyValue" GetNumericOnlyValueParameter="CallObject"/>
							<set var="digitsOnlyMobilePhone">{CallObject.ResultValue}</set>

							<var CallObject='new Object()'/>
							<set var="CallObject.ValueToHandle">{ec.workphone ?? null}</set>
							<call name="GetNumericOnlyValue" GetNumericOnlyValueParameter="CallObject"/>
							<set var="digitsOnlyBusinessPhone">{CallObject.ResultValue}</set>

							<!-- Search for existing contact in CRM -->
							<set var="lastnameAndEmailIsSet">{ec.lastname.isSet and ec.lastname.Length gt 0 and ec.email1address.isSet and ec.email1address.Length gt 0}</set>
							<set var="mobilephoneIsSet">{ec.lastname.isSet and ec.lastname.Length gt 0 and digitsOnlyMobilePhone.isSet}</set>
							<set var="businessphoneIsSet">{ec.firstname.isSet and ec.firstname.Length gt 0 and ec.lastname.isSet and ec.lastname.Length gt 0 and digitsOnlyBusinessPhone.isSet}</set>

							<set var="crmDupContacts">{[]}</set>

							<if condition="lastnameAndEmailIsSet or mobilephoneIsSet or businessphoneIsSet">
								<select from="crm" entity="contact" var="crmDupContacts">
									<where>
										<condition attr="statecode" op="eq">{0}</condition>
										<condition attr="lastname" op="eq">{ec.lastname}</condition>
										<or>
											<condition attr="emailaddress1" op="eq" if="lastnameAndEmailIsSet">{ec.email1address}</condition>
											<condition attr="vs360_mobilephonenums" op="eq" if="mobilephoneIsSet">{digitsOnlyMobilePhone}</condition>

											<if condition="businessphoneIsSet">
												<and>
													<condition attr="firstname" op="eq">{ec.firstname}</condition>
													<condition attr="vs360_telephone1nums" op="eq">{digitsOnlyBusinessPhone}</condition>
												</and>
											</if>
										</or>
									</where>
									<attr name="parentcustomerid"/>
									<attr name="vs360_companyname"/>
									<attr name="emailaddress1"/>
									<attr name="contactid"/>
									<attr name="lastname"/>
									<attr name="firstname"/>
									<attr name="vs360_mobilephonenums"/>
									<attr name="vs360_telephone1nums"/>
								</select>
							</if>
							
							
							<log>Deduplication found {crmDupContacts.Count} contacts in CRM.</log>
							
							<set var="DuplicatesFound">{crmDupContacts.Count gt 0}</set>
							
							<set var="created">{false}</set>
							<set var="ExContactStats">{0}</set>

							<set var="ManualSyncCategoryDetected">{false}</set>
							<set var="updatedKeywordsList">{null}</set>
							<if condition="Settings.ManualSyncCategory.isSet">

								<set var="exKeywords">{new List(ec.Keywords ?? (new List()))}</set>
								<if condition="exKeywords.Contains(Settings.ManualSyncCategory)">
									<set var="ManualSyncCategoryDetected">{true}</set>
									<log>'{Settings.ManualSyncCategory}' category found.</log>
								</if>
							</if>
							
							<if condition="ManualSyncCategoryDetected 
											and ec.crmid.isSet and ec.crmid ne '' 
											and ec.crmLinkState_vs360.isSet and ec.crmLinkState_vs360 eq '2'">
                                
								<log>An actively synchronized contact has been marked with a Manual Sync category.</log>
								<set var="skip">{true}</set>
                            </if>
							
							<set var="excontact">{ec}</set>
							<if condition="!skip">

								<if condition="ManualSyncCategoryDetected eq false and !DuplicatesFound">
									
									<set BlockCheck_Result="new Object()" />
									<BlockLists_CheckEmailAddress 
										EmailAddress="ec.email1address" 
										BlockLists="BlockLists" 
										Result="BlockCheck_Result" />
									
									<if condition="BlockCheck_Result.Blocked">
										<log>Email: {ec.email1address}. {BlockCheck_Result.BlockReason}.</log>
										<continue/>
									</if>
									
									
									<if condition="ec.title.isSet and ec.title ne ''">
										
										<set JobTitleBlockCheck_Result="new Object()" />
										<BlockLists_CheckString 
											StringToCheck="ec.title" 
											RulesSet="BlockLists.JobTitles" 
											Result="JobTitleBlockCheck_Result" />
										
										<if condition="JobTitleBlockCheck_Result.Blocked">
											<log>Job title: {ec.title}. {JobTitleBlockCheck_Result.BlockReason}.</log>
											<continue/>
										</if>
										
									</if>
								
								</if>
								
								
								<set var="CheckEmailDomainResults">{new Object()}</set>
								<CheckEmailDomain
									Context="Context"
									EmailAddress="ec.email1address"
									CheckEmailDomainResults="CheckEmailDomainResults"/>

								<if condition="!CheckEmailDomainResults.Account.isSet and !ManualSyncCategoryDetected and !DuplicatesFound">
									<log>Promoted Email Domain was not found in CRM.</log>
									<if condition="(!OnboardingMode and !Employee.BypassDomainsCheck) or (OnboardingMode and !Settings.OnboardingIgnorePrefDomains)">
										<log>    Skipping...</log>
										<continue/>
									</if>
								</if>
								<set var="AssociatedAccount">{CheckEmailDomainResults.Account ?? null}</set>
								
								
								<NormalizeExchangeContact Contact="ec"/>

								
								<set var="ec['crmid']">{Utils.NewGuid}</set>


								<set var="isDuplicate">{false}</set>
								<set var="backupDataCreated">{false}</set>

								<log>Exchange contact : {excontact.lastname ?? ''}, {excontact.firstname ?? ''}</log>

								<for var="mapping" in="Mapping.ContactMapping">
									<set var="excontact[mapping.Exchange]" if="mapping.ExchangeType eq 'String' and excontact[mapping.Exchange].isSet">{excontact[mapping.Exchange].Trim()}</set>
								</for>
								<for var="mapping" in="Mapping.ContactMultiLineMapping">
									<set var="cleanValue">{excontact[mapping.Exchange].Replace("&#xD;&#xA;", "&#xA;").Replace("&#xD;", "&#xA;") ?? null}</set>
									<set var="values">{Utils.Split(cleanValue, "&#xA;")}</set>
									<set var="counter">{0}</set>
									<for var="crmField" in="mapping.Crm">
										<set var="value" ></set>
										<set var="value" if="counter lt values.Length and values[counter] ne ''">{values[counter]}</set>
										<set var="excontact[crmField]">{value.Trim()}</set>
										<set var="counter">{counter+1}</set>
									</for>
								</for>


								<!-- Multi-line mapping convert -->
								<set var="additionalCrmValues">{new List()}</set>
								<for var="mapping" in="Mapping.ContactMultiLineMapping">
									<set var="cleanValue">{excontact[mapping.Exchange].Replace("&#xD;&#xA;", "&#xA;").Replace("&#xD;", "&#xA;") ?? null}</set>
									<set var="values">{Utils.Split(cleanValue, "&#xA;")}</set>
									<set var="counter">{0}</set>
									<for var="value" in="values">
										<if condition="value!=''">
											<if condition="counter ne mapping.Crm.Count">
												<set var="additionalCrmValues[]">
													<attr name="Name">{mapping.Crm[counter]}</attr>
													<attr name="Value">{value}</attr>
												</set>
												<set var="counter">{counter+1}</set>
											</if>
										</if>
									</for>
								</for>


								<if condition="OnboardingMode and UseStats">

									<for var="k" in="OnboardingSettings.WeightStats.Keys">
										<set var="ExContactStats" if="excontact[k].isSet and excontact[k] ne ''">{ExContactStats + OnboardingSettings.WeightStats[k]}</set>
									</for>

									<log>Calculated Stats for current user: {ExContactStats}</log>
								</if>

								

								<if condition="crmDupContacts.Count gt 0">

									<set var="crmDupContact">{null}</set>

									<if condition="lastnameAndEmailIsSet">
										<for var="dupContact" in="crmDupContacts">
											<if condition="(dupContact.emailaddress1.ToLower() eq excontact.email1address.ToLower()) ?? false">
												<set var="crmDupContact">{dupContact}</set>
												<break/>
											</if>
										</for>
									</if>

									<if condition="mobilephoneIsSet and !crmDupContact.isSet">
										<for var="dupContact" in="crmDupContacts">
											<if condition="(dupContact.vs360_mobilephonenums eq digitsOnlyMobilePhone) ?? false">
												<set var="crmDupContact">{dupContact}</set>
												<break/>
											</if>
										</for>
									</if>

									<if condition="businessphoneIsSet and !crmDupContact.isSet">
										<for var="dupContact" in="crmDupContacts">
											<if condition="(dupContact.vs360_telephone1nums eq digitsOnlyBusinessPhone
															and dupContact.firstname.ToLower() eq excontact.firstname.ToLower()) ?? false">
												<set var="crmDupContact">{dupContact}</set>
												<break/>
											</if>
										</for>
									</if>

									<set var="crmDupContact" if="!crmDupContact.isSet">{crmDupContacts[0]}</set>


									<log>Contact was found in crm - {crmDupContact.firstname} {crmDupContact.lastname}; Email: {crmDupContact.emailaddress1}; Mob: {crmDupContact.vs360_mobilephonenums}; Tel1: {crmDupContact.vs360_telephone1nums}; Id: {crmDupContact.contactid}.</log>

									<!-- Select connection from CRM -->
									<select from="crm" entity="vs360_relationship" var="existingUrs">
										<where>
											<condition attr="vs360_contactid" op="eq">{crmDupContact.contactid}</condition>
											<condition attr="statecode" op="eq">{0}</condition>

											<!--FOR ONBOARDINNG WE NEED RELATIONSHIPS FROM ALL EMPLOYEES-->
											<if condition="!OnboardingMode">
												<condition attr="vs360_employeeid" op="eq">{Employee.Id}</condition>
											</if>

										</where>
										<attr name="vs360_relationshipid"/>
										<attr name="vs360_deletedinoutlook"/>
										<attr name="vs360_employeeid"/>
										<attr name="vs360_rolloutweight"/>
									</select>

									<!--UPDATE CONTACT FLAG FOR ONBOARDING-->
									<set var="updateContact">{true}</set>
									<set var="canCreateRelationship">{true}</set>


									<if condition="existingUrs.Count gt 0">

										<for var="currentRel" in="existingUrs">

											<set var="needUpdateRelationship">{false}</set>
											<set var="needSetDuplicate">{false}</set>

											<if condition="currentRel.vs360_employeeid.Id eq Employee.Id">
												<set var="canCreateRelationship" if="OnboardingMode">{false}</set>
												<set var="needSetDuplicate">{currentRel.vs360_deletedinoutlook.isSet and currentRel.vs360_deletedinoutlook eq 0}</set>
												<set var="needUpdateRelationship">{(!currentRel.vs360_deletedinoutlook.isSet or (currentRel.vs360_deletedinoutlook.isSet and currentRel.vs360_deletedinoutlook eq 1)) or OnboardingMode}</set>
											</if>

											<if condition="needSetDuplicate">
												<set var="isDuplicate">{true}</set>

												<log>Exchange Contact {excontact.EntryId} is duplicate. Marking contact with Duplicate Category...</log>

												<if condition="!OnboardingMode or (OnboardingMode and !OnboardingSettings.IsTestMode)">
													<!--ADD DUPLICATE CATEGORY TO EXCHANGE CONTACT-->
													<set var="exKeywords">{new List(excontact.Keywords ?? (new List()))}</set>
													<if condition="!exKeywords.Contains('Duplicate')">
														<set var="exKeywords[]">Duplicate</set>
														<update in="exchange" entity="contact">
															<where>
																<if condition="Settings.SyncMainFolderOnly eq false">
																	<condition attr="@FolderName" op="eq">root/allitems</condition>
																</if>
																<condition attr="EntryId" op="eq">{excontact.EntryId}</condition>
															</where>
															<attr name="Keywords">{exKeywords.ToArray()}</attr>
														</update>
														<set var="updatedKeywordsList">{exKeywords}</set>
													</if>
													<!--end ADD DUPLICATE CATEGORY TO EXCHANGE CONTACT-->
												</if>
											</if>


											<!-- Deleted in Outlook not set -->
											<if condition="needUpdateRelationship">

												<log>Exchange Contact {ec.EntryId} is not duplicate. Updating CRM Relationship...</log>

												<!-- Update CRM Relationship -->
												<context for="crm" user="{RelationshipsExecutionContext}">
													<update in="crm" entity="vs360_relationship">
														<where>
															<condition attr="vs360_relationshipid" op="eq">{currentRel.vs360_relationshipid}</condition>
														</where>

														<attr name="vs360_rolloutweight" if="ExContactStats gt 0">{ExContactStats}</attr>

														<if condition="!isDuplicate">
															<attr name="vs360_syncwithoutlook">{true}</attr>
															<attr name="vs360_deletedinoutlook">{0}</attr>

															<for var="mapping" in="Mapping.ContactMapping">
																<if condition="PrivateFields.Contains(mapping.Crm) and excontact[mapping.Exchange].isSet">
																	<set mappingValue="excontact[mapping.Exchange]"></set>
																	<attr name="vs360_{mapping.Crm}" if="mapping.Type eq 'String' and mapping.ExchangeType eq 'String'">{mappingValue.Replace("&#xD;&#xA;", "&#xA;").Replace("&#xA;", "&#xD;&#xA;").TrimEnd()}</attr>
																	<attr name="vs360_{mapping.Crm}" if="mapping.Type eq 'String' and mapping.ExchangeType eq 'Array'">{Utils.Join(mappingValue, ', ')}</attr>
																	<attr name="vs360_{mapping.Crm}" if="mapping.Type eq 'DateTime' and mapping.ExchangeType eq 'DateTime'">{Utils.StringToDate(mappingValue, "yyyy-MM-dd'T'HH:mm:ss'Z'")}</attr>
																</if>
															</for>
															<for var="property" in="additionalCrmValues">
																<if condition="PrivateFields.Contains(property.Name) and property.Value.isSet">
																	<attr name="vs360_{property.Name}" if="property.Value ne ''">{property.Value}</attr>
																</if>
															</for>
														</if>
													</update>
												</context>
											</if>


											<!--ONBAORDING LOGIC FOR CONTACT UPDATE BASED ON STATS AND PREFERRED EMPLOYEE-->
											<if condition="OnboardingMode">

												<if condition="!UseStats or (Employee.PreferredUser ?? false)">

													<!-- Old logic compare by user weight user entity -->
													<if condition="OnboardingSettings.EmployeePreference[currentRel.vs360_employeeid.Id.ToString()].vs360_preferreduser eq true">
														<if condition="Employee.PreferredUser eq false">
															<set var="updateContact">{false}</set>
														</if>

														<if condition="Employee.PreferredUser eq true">
															<if condition="OnboardingSettings.EmployeePreference[currentRel.vs360_employeeid.Id.ToString()].vs360_preferenceorder gt Employee.PreferenceOrder">
																<set var="updateContact">{false}</set>
															</if>
														</if>
													</if>

												</if>

												<if condition="UseStats and (!Employee.PreferredUser ?? false)">

													<!-- Compare by logic per contact weight -->
													<set var="currentRel.vs360_rolloutweight" if="!currentRel.vs360_rolloutweight.isSet">{0}</set>
													<if condition="ExContactStats lt currentRel.vs360_rolloutweight or OnboardingSettings.EmployeePreference[currentRel.vs360_employeeid.Id.ToString()].vs360_preferreduser eq true">
														<set var="updateContact">{false}</set>
													</if>
												</if>

											</if>
											<!--END          ONBAORDING LOGIC FOR CONTACT UPDATE BASED ON STATS AND PREFERRED EMPLOYEE-->
										</for>
									</if>




									<!-- Active Relationship is not presented for Employee -->
									<if condition="(!OnboardingMode and existingUrs.Count eq 0) or (OnboardingMode and canCreateRelationship)">

										<log>Exchange Contact {ec.EntryId} is not duplicate. No CRM Relationship found. Creating CRM Relationship...</log>

										<!-- Create new CRM Relationship -->
										<context for="crm" user="{RelationshipsExecutionContext}">
											<create in="crm" entity="vs360_relationship" var="contactRelationshipId">
												<attr name="vs360_contactid">contact:{crmDupContact.contactid}</attr>
												<attr name="vs360_employeeid">vs360_employee:{Employee.Id}</attr>
												<attr name="vs360_syncwithoutlook">{true}</attr>
												<attr name="vs360_deletedinoutlook">{0}</attr>
												<attr name="vs360_source">{360000001}</attr> <!--REL360 Contact Sync-->
												<attr name="vs360_rolloutweight" if="ExContactStats gt 0">{ExContactStats}</attr>

												<for var="mapping" in="Mapping.ContactMapping">
													<if condition="PrivateFields.Contains(mapping.Crm) and excontact[mapping.Exchange].isSet">
														<set mappingValue="excontact[mapping.Exchange]"></set>
														<attr name="vs360_{mapping.Crm}" if="mapping.Type eq 'String' and mapping.ExchangeType eq 'String'">{mappingValue.Replace("&#xD;&#xA;", "&#xA;").Replace("&#xA;", "&#xD;&#xA;").TrimEnd()}</attr>
														<attr name="vs360_{mapping.Crm}" if="mapping.Type eq 'String' and mapping.ExchangeType eq 'Array'">{Utils.Join(mappingValue, ', ')}</attr>
														<attr name="vs360_{mapping.Crm}" if="mapping.Type eq 'DateTime' and mapping.ExchangeType eq 'DateTime'">{Utils.StringToDate(mappingValue, "yyyy-MM-dd'T'HH:mm:ss'Z'")}</attr>
													</if>
												</for>
												<for var="property" in="additionalCrmValues">
													<if condition="PrivateFields.Contains(property.Name) and property.Value.isSet">
														<attr name="vs360_{property.Name}" if="property.Value ne ''">{property.Value}</attr>
													</if>
												</for>
											</create>
										</context>
									</if>


									<if condition="!isDuplicate">

										<CreateBackupDataRecord
																ExContact="excontact"
																CrmContactId="crmDupContact.contactid"
																EmployeeId="Employee.Id"
																Mapping="Mapping"
																AdditionalCrmValues="additionalCrmValues"/>

										<set var="backupDataCreated">{true}</set>

										<if condition="!OnboardingMode">
											<!-- Populate CRM contact empty fields with data from Exchange -->
											<var CallObject='new Object()'/>
											<set var="CallObject.Contactid">{crmDupContact.contactid}</set>
											<set var="CallObject.Mapping">{Mapping}</set>
											<set var="CallObject.ExContact">{excontact}</set>
											<set var="CallObject.PrivateFields">{PrivateFields}</set>
											<set var="CallObject.Settings">{Settings}</set>
											<set var="CallObject.Employee">{Employee}</set>
											<set var="CallObject.AssociatedAccount">{AssociatedAccount}</set>
											<call name="FillCRMContactEmptyFieldsWithDataFromExchange" CallObject="CallObject"/>
										</if>

										<if condition="Settings.OneWaySync eq '0' and Settings.ConflictingDataPriority eq 'crm'">
											<!-- Update the Outlook Contact if CRM contact and Outlook Contact have conflicting data -->
											<var CallObject='new Object()'/>
											<set var="CallObject.Contactid">{crmDupContact.contactid}</set>
											<set var="CallObject.Mapping">{Mapping}</set>
											<set var="CallObject.ExContact">{excontact}</set>
											<set var="CallObject.Settings">{Settings}</set>
											<set var="CallObject.Employee">{Employee}</set>
											<call name="UpdateExchangeContactConflictingData" CallObject="CallObject"/>
										</if>

										<if condition="(Settings.OneWaySync eq '0' and Settings.ConflictingDataPriority eq 'exchange') or (OnboardingMode and updateContact)">
											<!-- Update the Outlook Contact if CRM contact and Outlook Contact have conflicting data -->
											<var CallObject='new Object()'/>
											<set var="CallObject.Contactid">{crmDupContact.contactid}</set>
											<set var="CallObject.Mapping">{Mapping}</set>
											<set var="CallObject.ExContact">{excontact}</set>
											<set var="CallObject.Employee">{Employee}</set>
											<set var="CallObject.Settings">{Settings}</set>
											<set var="CallObject.PrivateFields">{PrivateFields}</set>
											<set var="CallObject.IsOnboarding">{OnboardingMode}</set>
											<set var="CallObject.AssociatedAccount">{AssociatedAccount}</set>
											<call name="UpdateCrmContactConflictingData" CallObject="CallObject"/>
										</if>



										<!-- Select Exchange Contact Data after Fields Merge -->
										<select from="exchange" entity="contact" var="fullExchangeContact">
											<where>
												<if condition="Settings.SyncMainFolderOnly eq false">
													<condition attr="parententryid" op="ne">deleteditems</condition>
													<condition attr="@FolderName" op="eq">root/allitems</condition>
													<if condition="Settings.OutlookFolder.isSet and Settings.OutlookFolder ne ''">
														<condition attr="parententryid" op="ne">{Settings.OutlookFolder}</condition>
													</if>
												</if>
												<condition attr="@BodyResponseType" op="eq">Text</condition>
												<condition attr="EntryId" op="eq">{ec.EntryId}</condition>
											</where>
											<for var="mapping" in="Mapping.ContactMapping">
												<attr name="{mapping.Exchange}" unless="mapping.Multiline.isSet"/>
											</for>
											<for var="mapping" in="Mapping.ContactMultiLineMapping">
												<attr name="{mapping.Exchange}"/>
											</for>
											<attr name="EntryId"/>
											<attr name="Keywords"/>
											<attr name="companyname"/>
											<attr name="lastmodifieddate"/>
											<attr name="lastcommitdate"/>
											<attr name="email1displayname"/>
											<attr name="hasattachments"/>
											<attr name="attachments"/>
										</select>

										<set var="excontact">{fullExchangeContact[0]}</set>

										<set ValidationResult="new Object()" ValidationResult.isInvalid="false"/>
										<ProcessX500Emailaddress exContact="excontact" Output="ValidationResult"/>

										<set var="exContactData">{new Dictionary()}</set>

										<for var="mapping" in="Mapping.ContactMapping">
											<if condition="excontact[mapping.Exchange].isSet">
												<set mappingValue="excontact[mapping.Exchange]"></set>
												<set var="exContactData[mapping.Crm]" if="mapping.Type eq 'String' and mapping.ExchangeType eq 'String'">{mappingValue.Replace("&#xD;&#xA;", "&#xA;").Replace("&#xA;", "&#xD;&#xA;").TrimEnd()}</set>
												<set var="exContactData[mapping.Crm]" if="mapping.Type eq 'String' and mapping.ExchangeType eq 'Array'">{Utils.Join(mappingValue, ', ')}</set>
												<set var="exContactData[mapping.Crm]" if="mapping.Type eq 'DateTime' and mapping.ExchangeType eq 'DateTime'">{Utils.StringToDate(mappingValue, "yyyy-MM-dd'T'HH:mm:ss'Z'")}</set>
											</if>
										</for>
										<for var="property" in="additionalCrmValues">
											<if condition="property.Value.isSet">
												<set var="exContactData[property.Name]" if="property.Value ne ''">{property.Value}</set>
											</if>
										</for>


										<if condition="excontact.hasattachments eq 'true'">
											<set var="atts">{@exchange.GetAttachments(excontact.attachments)}</set>

											<for var="at" in="atts">
												<if condition="at.Name eq 'ContactPicture.jpg' and at.ContentType eq 'image/jpeg'">
													<set var="picture">{at.Content}</set>
													<set var="exContactData['entityimage']">{Utils.ByteArrayToBase64String(instSHA256.ComputeHash(picture))}</set>
													<log>Contact picture was found.</log>
													<break/>
												</if>
											</for>
										</if>

										<set var="canUpdateExContact">{true}</set>

										<if condition="OnboardingMode">

											<if condition="OnboardingSettings.IsTestMode">
												<set var="canUpdateExContact">{false}</set>
											</if>
										</if>

										<!-- Link Exchange contact and update crmxml with processed Exchange data -->
										<if condition="canUpdateExContact">
											<update in="exchange" entity="contact">
												<where>
													<if condition="Settings.SyncMainFolderOnly eq false">
														<condition attr="@FolderName" op="eq">root/allitems</condition>
													</if>
													<condition attr="EntryId" op="eq">{excontact.EntryId}</condition>
												</where>
												<attr name="crmid">{crmDupContact.contactid.ToString()}</attr>
												<!-- <attr name="crmLinkState">{2}</attr> -->
												<attr name="crmLinkState_vs360">{2}</attr>
												<attr name="iconindex">{514}</attr>
												<attr name="crmxml_vs360">{Xml.ToXml(exContactData, "contact")}</attr>

												<if condition="Settings.OneWaySync eq '1'">
													<set var="dataForExXml">{new Dictionary()}</set>
													<for var="mapping" in="Mapping.ContactMapping">
														<if condition="!mapping.Multiline.isSet">
															<set if="mapping.ExchangeType ne 'Array'" var="dataForExXml[mapping.Exchange]">{excontact[mapping.Exchange] ?? null}</set>
															<set if="mapping.ExchangeType eq 'Array'" var="dataForExXml[mapping.Exchange]">{Utils.Join(excontact[mapping.Exchange], ', ') ?? null}</set>
														</if>
													</for>

													<for var="mapping" in="Mapping.ContactMultiLineMapping">
														<set var="dataForExXml[mapping.Exchange]">{excontact[mapping.Exchange]}</set>
													</for>

													<if condition="exContactData.ContainsKey('entityimage') and exContactData['entityimage'].isSet">
														<set var="dataForExXml['entityimage']">{exContactData['entityimage']}</set>
													</if>


													<attr name="exchangexml">{Xml.ToXml(dataForExXml, "contact")}</attr>
												</if>
											</update>
										</if>

										<!-- Send Email Notification if required -->
										<if condition="Settings.SendEmailNotification.isSet and Settings.SendEmailNotification eq '1' and Settings.SendEmailNotificationMethod.isSet and !OnboardingMode">
											<var NotificationEmailParameters='new Object()'/>
											<set var="NotificationEmailParameters.Settings">{Settings}</set>
											<set var="NotificationEmailParameters.ExchangeContact">{ContactForEmail}</set>
											<set var="NotificationEmailParameters.CrmContactId">{crmDupContact.contactid}</set>
											<set var="NotificationEmailParameters.CrmServer">crm</set>
											<set var="NotificationEmailParameters.RecipientEmployee">{Employee}</set>
											<set var="NotificationEmailParameters.SendToRecipients">{Settings.SendToRecipients}</set>
											<call name="NotificationEmail_Create" CallObject="NotificationEmailParameters"/>
										</if>

									</if>

								</if>


								<if condition="crmDupContacts.Count eq 0">

									<log>Creating the contact in Crm : {ec.lastname}, {ec.firstname}</log>

									<set var="crmContact">
										<for var="mapping" in="Mapping.ContactMapping">
											<if condition="excontact[mapping.Exchange].isSet">
												<set mappingValue="excontact[mapping.Exchange]"></set>
												<attr name="{mapping.Crm}" if="mapping.Type eq 'String' and mapping.ExchangeType eq 'String'">{mappingValue.Replace("&#xD;&#xA;", "&#xA;").Replace("&#xA;", "&#xD;&#xA;").TrimEnd()}</attr>
												<attr name="{mapping.Crm}" if="mapping.Type eq 'String' and mapping.ExchangeType eq 'Array'">{Utils.Join(mappingValue, ', ')}</attr>
												<attr name="{mapping.Crm}" if="mapping.Type eq 'DateTime' and mapping.ExchangeType eq 'DateTime'">{Utils.StringToDate(mappingValue, "yyyy-MM-dd'T'HH:mm:ss'Z'")}</attr>
											</if>
										</for>
									</set>

									<!--<log>Creating Crm contact: {crmContact}</log>-->

									<set var="crmContactIdReal">{null}</set>

									<sandbox>
										<if condition="Settings.ImageSync">
											<set var="pictureHash">{null}</set>
											<set var="picture">{null}</set>

											<if condition="excontact.hasattachments eq 'true'">
												<set var="atts">{@exchange.GetAttachments(excontact.attachments)}</set>

												<for var="at" in="atts">
													<if condition="at.Name eq 'ContactPicture.jpg' and at.ContentType eq 'image/jpeg'">
														<set var="picture">{at.Content}</set>
														<set var="pictureHash">{Utils.ByteArrayToBase64String(instSHA256.ComputeHash(picture))}</set>
														<set var="crmContact['entityimage']">{picture}</set>
														<log>Contact picture was found.</log>
														<break/>
													</if>
												</for>
											</if>
										</if>
										
										
										<create in="crm" entity="contact" var="crmContactIdReal">

											<for var="property" in="crmContact">
												<attr name="{property.Key}" if="!OnboardingMode or (OnboardingMode and !PrivateFields.Contains(property.Key))">{property.Value}</attr>
											</for>
											<if condition="AssociatedAccount.isSet">
												<attr name="parentcustomerid">account:{AssociatedAccount.Id}</attr>
												<attr name="vs360_companyname">{AssociatedAccount.Name}</attr>
												<attr name="vs360_reassignreview">{AssociatedAccount.HasChildAccounts}</attr>
											</if>

											<attr name="vs360_modifiedbyemployeeid">vs360_employee:{Employee.Id}</attr>

											<if condition="crmContact.ContainsKey('entityimage') and crmContact['entityimage'].isSet">
												<attr name="entityimage">{crmContact['entityimage']}</attr>
											</if>

											<if condition="excontact.companyname.isSet and excontact.companyname ne ''">
												<attr name="vs360_originalcompanyname">{excontact.companyname}</attr>
                                            </if>
											
											<if condition="OnboardingMode">
												<attr name="vs360_mobilephonenums" if="mobilephoneIsSet">{digitsOnlyMobilePhone}</attr>
												<attr name="vs360_telephone1nums" if="businessphoneIsSet">{digitsOnlyBusinessPhone}</attr>
												<attr name="vs360_message">noaction</attr>
											</if>
											<attr name="vs360_source">{360000001}</attr><!-- REL360 Contact Sync -->
										</create>

										<if condition="!backupDataCreated">
											<CreateBackupDataRecord
																	ExContact="excontact"
																	CrmContactId="crmContactIdReal"
																	EmployeeId="Employee.Id"
																	Mapping="Mapping"
																	AdditionalCrmValues="additionalCrmValues"/>
										</if>
									</sandbox>

									<set var="created">{crmContactIdReal.isSet}</set>

									<log if="created">Contact was created. Real crmid: {crmContactIdReal}</log>
									<log unless="created">Contact was not created</log>

									<if condition="created">

										<log>Updating Relationship parameters</log>

										<if condition="OnboardingMode">
											<!--CREATE RELATIONSHIP BECAUSE SCRIPT RUNS IN ADMIN CONTEXT IN ONBOARDING MODE-->
											<create in="crm" entity="vs360_relationship" var="crmUrId">
												<attr name="vs360_contactid">contact:{crmContactIdReal}</attr>
												<attr name="vs360_employeeid">vs360_employee:{Employee.Id}</attr>
												<attr name="vs360_deletedinoutlook">{0}</attr>
												<attr name="vs360_rolloutweight" if="UseStats">{ExContactStats}</attr>
												<attr name="vs360_source">{360000001}</attr> <!--REL360 Contact Sync-->

												<for var="mapping" in="Mapping.ContactMapping">
													<if condition="PrivateFields.Contains(mapping.Crm)">
														<attr name="vs360_{mapping.Crm}" if="excontact[mapping.Exchange].isSet and mapping.Type.isSet and mapping.Type eq 'DateTime'">{Utils.StringToDate(excontact[mapping.Exchange], "yyyy-MM-dd'T'HH:mm:ss'Z'")}</attr>
														<attr name="vs360_{mapping.Crm}" if="!mapping.Type.isSet or (mapping.Type.isSet and mapping.Type eq 'String' and mapping.ExchangeType eq 'String')">{excontact[mapping.Exchange]}</attr>
														<attr name="vs360_{mapping.Crm}" if="mapping.Type.isSet and mapping.ExchangeType.isSet and mapping.Type eq 'String' and mapping.ExchangeType eq 'Array'">{Utils.Join(excontact[mapping.Exchange], ', ')}</attr>
													</if>
												</for>
											</create>

										</if>

										<if condition="!OnboardingMode">
											<!--UPDATE RELATIONSHIP FIELDS IN SYNC MODE BECAUSE RELATIONSHIP WILL BE CREATED BY PLUGIN-->
											<update in="crm" entity="vs360_relationship">
												<where>
													<condition attr="vs360_contactid" op="eq">{crmContactIdReal}</condition>
													<condition attr="vs360_employeeid" op="eq">{Employee.Id}</condition>
												</where>
												<attr name="vs360_syncwithoutlook">{true}</attr>
												<attr name="vs360_deletedinoutlook">{0}</attr>
											</update>
										</if>


										<set crmContactData="new Dictionary()"/>

										<if condition="!OnboardingMode or OnboardingSettings.CrmXmlMode eq 'crm'">

											<for var="mapping" in="Mapping.ContactMapping">
												<if condition="crmContact[mapping.Crm].isSet">
													<set var="crmContactData[mapping.Crm]">{crmContact[mapping.Crm]}</set>
												</if>
											</for>

											<set var="crmContactData['entityimage']" if="pictureHash.isSet">{pictureHash}</set>

										</if>

										<if condition="OnboardingMode and OnboardingSettings.CrmXmlMode eq 'exchange'">

											<for var="mapping" in="Mapping.ContactMapping">
												<if condition="excontact[mapping.Exchange].isSet">
													<set var="crmContactData[mapping.Crm]" if="excontact[mapping.Exchange].isSet and mapping.Type.isSet and mapping.Type eq 'DateTime' and excontact[mapping.Exchange] ne ''">{Utils.StringToDate(excontact[mapping.Exchange], "yyyy-MM-dd'T'HH:mm:ss'Z'")}</set>
													<set var="crmContactData[mapping.Crm]" if="(!mapping.Type.isSet or mapping.Type eq 'String' and mapping.ExchangeType eq 'String') and excontact[mapping.Exchange].isSet and excontact[mapping.Exchange] ne ''">{excontact[mapping.Exchange].Replace("&#xD;&#xA;", "&#xA;").Replace("&#xA;", "&#xD;&#xA;").Trim()}</set>
													<set var="crmContactData[mapping.Crm]" if="mapping.Type.isSet and mapping.ExchangeType.isSet and mapping.Type eq 'String' and mapping.ExchangeType eq 'Array'">{Utils.Join(excontact[mapping.Exchange], ', ')}</set>
												</if>
											</for>

											<for var="property" in="additionalCrmValues">
												<if condition="property.Value.isSet">
													<set var="crmContactData[property.Name]" if="property.Value ne ''">{property.Value}</set>
												</if>
											</for>

										</if>


										<if condition="!OnboardingMode or !OnboardingSettings.IsTestMode">

											<update in="exchange" entity="contact">
												<where>
													<if condition="Settings.SyncMainFolderOnly eq false">
														<condition attr="@FolderName" op="eq">root/allitems</condition>
													</if>
													<condition attr="EntryId" op="eq">{ec.EntryId}</condition>
												</where>
												<!-- <attr name="crmLinkState">{2}</attr> -->
												<attr name="crmLinkState_vs360">{2}</attr>
												<attr name="iconindex">{514}</attr>
												<attr name="crmid">{crmContactIdReal.ToString()}</attr>
												<attr name="crmxml_vs360">{Xml.ToXml(crmContactData, "contact")}</attr>
												<if condition="Settings.OneWaySync eq '1'">
													<set var="dataForExXml">{new Dictionary()}</set>
													<for var="mapping" in="Mapping.ContactMapping">
														<if condition="!mapping.Multiline.isSet">
															<set if="mapping.ExchangeType ne 'Array'" var="dataForExXml[mapping.Exchange]">{excontact[mapping.Exchange] ?? null}</set>
															<set if="mapping.ExchangeType eq 'Array'" var="dataForExXml[mapping.Exchange]">{Utils.Join(excontact[mapping.Exchange], ', ') ?? null}</set>
														</if>
													</for>

													<for var="mapping" in="Mapping.ContactMultiLineMapping">
														<set var="dataForExXml[mapping.Exchange]">{excontact[mapping.Exchange]}</set>
													</for>

													<if condition="pictureHash.isSet">
														<set var="dataForExXml['entityimage']">{pictureHash}</set>
													</if>

													<attr name="exchangexml">{Xml.ToXml(dataForExXml, "contact")}</attr>
												</if>
											</update>

										</if>



									</if>

								</if>
							</if>
							<!--Remove manual category from keywords-->
							<if condition="ManualSyncCategoryDetected eq true">
								<log>Removing Manual Sync category...</log>
								<set var="exKeywords" if="!updatedKeywordsList.isSet">{new List(excontact.Keywords)}</set>
								<set var="exKeywords" if="updatedKeywordsList.isSet">{updatedKeywordsList}</set>
								<set>{exKeywords.Remove(Settings.ManualSyncCategory)}</set>
								<update in="exchange" entity="contact">
									<where>
										<if condition="Settings.SyncMainFolderOnly eq false">
											<condition attr="@FolderName" op="eq">root/allitems</condition>
										</if>
										<condition attr="EntryId" op="eq">{excontact.EntryId}</condition>
									</where>
									<attr name="Keywords" if="exKeywords.Count gt 0">{exKeywords.ToArray()}</attr>
									<attr name="Keywords" if="exKeywords.Count eq 0">{null}</attr>
								</update>
							</if>
							
							<onerror var="ex">
								<set var="CriticalErrorOccured">{true}</set>
							</onerror>
						</sandbox>
					</for>

				</context>
			</context>

			<if condition="!OnboardingSettings.isSet and !CriticalErrorOccured">
				<log>Stamping the LastSyncTime {currentRunDate}</log>
				<update in="crm" entity="vs360_employee">
					<where>
						<condition attr="vs360_employeeid" op="eq">{Employee.Id}</condition>
					</where>
					<attr name="vs360_lastcontactscreationdate">{currentRunDate}</attr>
				</update>
				<set var="Employee.LastCreationDate">{currentRunDate}</set>
			</if>
		</if>

		<onerror var="ex">
			<log if="Settings.ExtendedLog eq '0'">{logDetail}</log>
			<log>Synchronization Failed: {ex}</log>
		</onerror>
	</sandbox>
</script>