<script>
	<!--  ********************************************************************************************* -->
	<!--	Teams Load																					-->
	<!--		Populates a team with EMPLOYEE memebers using a spreadsheet as the source of members.	-->
	<!--		- Source spreadsheet must have at least these two columns.								-->
	<!--			- Name																				-->
	<!--			- EmailAddress																		-->
	<!--  ********************************************************************************************* -->

	<!--  ******************************* -->
	<!--   SCRIPT CONFIGURATION SECTION   -->
	<!--  ******************************* -->
	<!--   Examine/evaluate carefully     -->
	<!--   prior to running script.       -->
	<!--  ******************************* -->
	<set var="TimeStampAsText">{Utils.Now.ToString('yyyy-MM-dd-hh-mm')}</set>

	<!-- START: Logging Setup -->
	<set var="LiveLog">{new Object()}</set>
	<set var="LiveLog.UseLog">{true}</set>
	<set var="LiveLog.Text"/>
	<set var="LiveLog.FileName">C:\Temp\Sync360 LiveLogs\REL360SyncTeamLoadLog {TimeStampAsText}</set>

	<var BlockInfo="new Object()"/>
	<set var="BlockInfo.LiveLog">{LiveLog}</set>
	<set var="BlockInfo.Title">REL360 Sync Team Copy</set>
	<!-- END: Logging Setup -->

	<!-- Script Behavior Settings -->
	<set var="crmTarget">crm</set>
	<!-- Name of the team to create in the target CRM system -->
	<set var="teamTargetName">SyncTeam All</set>
	<!-- Employees Input File Name - Change as needed -->
	<set var="CsvPath">C:\Temp\REL360DataSources\XXXXXXXXXXXXXXXXXXXXXX.csv</set>

	<!--  *********************************** -->
	<!--   END SCRIPT CONFIGURATION SECTION   -->
	<!--  *********************************** -->

	<set var="BlockInfo.Mode">Start</set>
	<set var="BlockInfo.LiveLog">{LiveLog}</set>
	<DisplayStartEndBlock BlockInfo="BlockInfo"/>

	<!-- WARNING: You need to create the Excel CSV file with a ^ symbol as delimiter instead of a comma delimeter!!!  
			This is because often, company names include a comma and some may use the pipe | symbol as well. -->
	<set var="csvData">{Csv.Read(CsvPath, Encoding.UTF8, ',')}</set>

	<set var="LiveLog.Text">{csvData.Count} employee team members found</set>
	<LiveLog LiveLog="LiveLog"/>

	<log>Get team from target CRM...</log>
	<select from="{crmTarget}" entity="team" var="ermTeams">
		<where>
			<condition attr="name" op="eq">{teamTargetName}</condition>
		</where>
		<attr name="teamid"/>
		<attr name="name"/>
	</select>

	<exception if="!ermTeams.isSet or ermTeams.Count le 0">Team (teamTargetName) was not found.</exception>

	<set var="targetTeamID">{ermTeams[0].teamid}</set>

	<set var="rowCnt">{0}</set>

	<for var="csvRow" in="csvData">
		<sandbox>
			<set var="rowCnt">{rowCnt + 1}</set>

			<set var="Name">{csvRow['Name'] ?? null}</set>
			<set var="EmailAddress">{csvRow['EmailAddress'] ?? null}</set>
			<set var="LiveLog.Text">Processing employee {rowCnt} of {csvData.Count}:  {Name}...</set>
			<LiveLog LiveLog="LiveLog"/>

			<if condition="EmailAddress.isSet">
				<then>
					<!-- Get target EmployeeID -->
					<select from="{crmTarget}" entity="vs360_employee" var="targetEmp" count="1">
						<where>
							<condition attr="emailaddress" op="eq">{EmailAddress}</condition>
						</where>
						<attr name="vs360_employeeid" as="targetEmpID"/>
						<attr name="statecode"/>
					</select>

					<if condition="targetEmp.isSet and targetEmp[0].isSet and targetEmp[0].targetEmpID.isSet">
						<then>
							<if condition="targetEmp[0].statecode.isSet and targetEmp[0].statecode eq 0">
								<then>
									<set var="LiveLog.Text">   Creating Team Membership for {Name}: {EmailAddress}...</set>
									<LiveLog LiveLog="LiveLog"/>
									<set var="targetEntityName">team</set>
									<set var="targetEntityId">{targetTeamID}</set>
									<set var="otherEntityName">vs360_employee</set>
									<set var="otherEntityId">{targetEmp[0].targetEmpID}</set>
									<set var="relationshipName">vs360_vs360_employee_team</set>
									<set var="assocStr">@{crmTarget}.AssociateEntities(targetEntityName, targetEntityId, otherEntityName, otherEntityId, relationshipName)</set>
									<set var="assocResult">{Utils.Eval(assocStr)}</set>
								</then>
								<else>
									<set var="LiveLog.Text">   Employee {Name} not Active. Not added to team {teamTargetName}. </set>
									<LiveLog LiveLog="LiveLog"/>
								</else>
							</if>
						</then>
						<else>
							<set var="LiveLog.Text">  NOT FOUND:  Employee {Name} not found in Dataverse by email address. Not added to team {teamTargetName}. </set>
							<LiveLog LiveLog="LiveLog"/>
						</else>
					</if>
				</then>
				<else>
					<set var="LiveLog.Text">   Employee email missing from source file record: {Name}. Not added to team {teamTargetName}.</set>
					<LiveLog LiveLog="LiveLog"/>
				</else>
			</if>
		</sandbox>

	</for>

	<set var="BlockInfo.Mode">End</set>
	<set var="LiveMode.Text"/>
	<set var="BlockInfo.LiveLog">{LiveLog}</set>
	<DisplayStartEndBlock BlockInfo="BlockInfo"/>

</script>