<script>
	<!-- 
	***************************************************************************************************
		Script Name: IMP_DomainsAnalysisReport.xml
		Description: Analyzes contact data from CRM and contact and email in Exchange for each
						participant and provides a traffic report by domain.
						
	===============================================================================================
		Date		Developer			Details
	===============================================================================================
		2024.08.21  Glen Wolinsky		Added counter to Exchange processing.
		2024.07.25	Glen Wolinsky		Added Company Status column to report
		2024.05.09	Glen Wolinsky		Fixes to Company Statistics and Legacy ID functionalities
		2024.02.21	Glen Wolinsky		Added additional log messages.
		2023.12.13	Glen Wolinsky		Initial creation.
		
		...............................................................................................
	***************************************************************************************************
	-->

	<!--  ************************************* -->
	<!--   BEGIN SCRIPT CONFIGURATION SECTION   -->
	<!--  ************************************* -->

	<!-- ******************************************** -->
	<!--              CRM Report Setup                -->
	<!-- ******************************************** -->
	<var BlockInfo="new Object()"/>
	<set var="BlockInfo.Title">Domains Anlysis Report</set>

	<!-- Data sources and output files -->
	<set var="CRM">crm</set>
	<set var="Exchange">exchange</set>
	<set var="TimeStampAsText">{Utils.Now.ToString('yyyy-MM-dd-hh-mm')}</set>
	<set var="CRMDomainsReportFile">C:\Temp\REL360Output\[CLIENT] DomainsAnalysisReport-{TimeStampAsText}.csv</set>
	<!-- Report Output file path & name -->

	<!-- Live Log Setup -->
	<set var="LiveLog">{new Object()}</set>
	<set var="LiveLog.UseLog">{true}</set>
	<set var="LiveLog.Text"/>
	<set var="LiveLog.FileName">C:\Temp\Sync360 LiveLogs\[CLIENT] DomainsAnalysisReport_RunLog_{TimeStampAsText}.txt</set>

	<set var="TeamName">SyncTeam All</set>
	<!-- Team containing employees whos Exchange data will be analyzed. -->

	<!-- ******************************************** -->
	<!--         Run Configuration Settings           -->
	<!-- ******************************************** -->
	<set var="AnalyzeCRMData">{true}</set>
	<!-- Include CRM data in the analysis -->
	<set var="AnalyzeExchangeData">{true}</set>
	<!-- Include Exchange data in the analysis -->
	<set var="ProcessEmails">{true}</set>
	<!-- if true (default), this will evaluate users email traffic in exchange. -->

	<set var="IncludeProhibitedDomains">{false}</set>
	<!-- if true, the Prohibited Domains will be included in the statistics/counts. -->
	<set var="IncludeInactiveContacts">{false}</set>
	<!-- If true, NO inactive contacts will be considered in statistics/counts -->
	<set var="CleanupCompaniesByContactsCount">{false}</set>
	<!-- If true, when duplicate domains exist, will pick a winner company and remove the losers by contact count. -->
	<set var="CheckExistingCRMDomains">{false}</set>
	<!-- For second report: whether or not to report includes existing domains information -->

	<set var="IncludeCompanyStastics">{false}</set>
	<!-- If true, the includes counts of Opportunites, Leads, and Projects/Jobs/Matters -->
	<set var="UseProjectLead">{false}</set>
	<!-- IF true and getting company stats, it will check the Job Leads entity, otherwise it checks regular leads -->
	<set var="UseHSOAccountField">{false}</set>
	<!-- Determines which acocunt schema name to use for indexing the Opportunities in the data dictionary. -->

	<set var="IncludeLegacyID">{false}</set>
	<!-- Whether or not to include Legacy ID in report. -->
	<set var="LegacyIDFieldName">vs360_legacyid</set>
	<!-- Schema name for legacy ID field for the Company record. ONLY NEEDED when including Legacy ID-->


	<!-- ******************************************** -->
	<!--         Exchange Report Setup                -->
	<!-- ******************************************** -->

	<!-- Processing Variables -->
	<set var="CutOffDate">{Utils.Now.AddMonths(-3)}</set>
	<!-- This is how far back in the email history it will search for data -->
	<set var="SignatureDebugMode">{false}</set>
	<set var="LogBody">{false}</set>
	<set var="PageSize">{500}</set>

	<!--  *********************************** -->
	<!--   END SCRIPT CONFIGURATION SECTION   -->
	<!--  *********************************** -->

	<set var="BlockInfo.Mode">Start</set>
	<set var="BlockInfo.LiveLog">{LiveLog}</set>
	<DisplayStartEndBlock BlockInfo="BlockInfo"/>

	<set var="LiveLog.Text">Exchange page size: {PageSize}{Utils.NewLine}</set>
	<LiveLog LiveLog="LiveLog"/>

	<!-- Data Variables -->
	<set BlockLists="new Object()"/>
	<set EmailEngine="typeof 'EmailParser.EmailProcessingFacade, EmailParser'"/>
	<set EmailEngines="static EmailEngine"/>

	<set var="Regex">{typeof 'System.Text.RegularExpressions.Regex, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'}</set>
	<set var="regexDom">{new Regex("<![CDATA[(?=^.{4,253}$)(^((?!-)[a-zA-Z0-9-]{0,62}[a-zA-Z0-9]\.)+[a-zA-Z]{2,63}$)]]>")}</set>

	<set var="DataStorage">{new Dictionary()}</set>
	<set var="OppsData">{new Dictionary()}</set>
	<set var="LeadsData">{new Dictionary()}</set>
	<set var="JobsData">{new Dictionary()}</set>
	<set var="ExDataStorage">{new Dictionary()}</set>
	<set var="emailList">{new List()}</set>
	<set var="emptyDomain">X-NoDomain-X</set>
	<!-- NOT DATA.  Just used as a place holder in script. -->

	<set var="CacheContainer">{new Dictionary()}</set>

	<!-- ******************************************** -->
	<!--          CRM Report Run - START              -->
	<!-- ******************************************** -->

	<!-- Load Blocklists -->
	<set var="LiveLog.Text">Loading Block Lists...</set>
	<LiveLog LiveLog="LiveLog"/>
	<if condition="!IncludeProhibitedDomains">
		<CacheLoader CacheContainer="CacheContainer" />
		<BlockLists_Load
			RawDataDictionary="CacheContainer"
			BlockListContainer="BlockLists" />
	</if>
	<set var="LiveLog.Text">  Loading Complete. {Utils.NewLine}</set>
	<LiveLog LiveLog="LiveLog"/>

	<if condition="AnalyzeCRMData">

		<if condition="CheckExistingCRMDomains">
			<var DomainsDict="new Dictionary()"/>

			<!-- Load All Domain Records & Create Dictionary -->
			<set var="LiveLog.Text">Loading Existing Domains List...</set>
			<LiveLog LiveLog="LiveLog"/>
			<select from="{CRM}" entity="vs360_companydomain" var="domains">
				<where>
					<condition attr="statecode" op="eq">{0}</condition>
				</where>
				<attr name="vs360_name"/>
				<attr name="vs360_primarycompanyid"/>
				<order by="vs360_name"/>
			</select>

			<for var="dom" in="domains">
				<var DomInfo="new Object()"/>
				<set var="DomInfo.DomainName">{dom.vs360_name}</set>
				<set var="DomInfo.IsLegacy"/>
				<set var="DomInfo.IsLegacy" if="dom.vs360_primarycompanyid ne null">X</set>
				<set var="DomInfo.IsPreferred"/>
				<set var="DomInfo.IsPotential"/>
				<set var="DomainsDict[dom.vs360_name]">{DomInfo}</set>
			</for>
			<set var="LiveLog.Text">     Main Domains List Loaded: {domains.Count}</set>
			<LiveLog LiveLog="LiveLog"/>


			<!-- Load Preferred Domains -->
			<select from="{CRM}" entity="vs360_companydomain" var="domains">
				<where>
					<condition attr="statecode" op="eq">{0}</condition>
				</where>
				<join type="inner" entity="vs360_vs360_companydomain_account" to="vs360_companydomainid" from="vs360_companydomainid" as="PrefDoms">
					<attr name="vs360_vs360_companydomain_accountid" as="PrefDomainid"/>
				</join>
				<attr name="vs360_name"/>
			</select>

			<for var="dom" in="domains">
				<set var="DomainsDict[dom.vs360_name].IsPreferred">X</set>
			</for>
			<set var="LiveLog.Text">     Preferred Domains List Loaded: {domains.Count}</set>
			<LiveLog LiveLog="LiveLog"/>

			<!-- Load Potential Domains -->
			<select from="{CRM}" entity="vs360_companydomain" var="domains">
				<where>
					<condition attr="statecode" op="eq">{0}</condition>
				</where>
				<join type="inner" entity="vs360_vs360_companydomain_vs360_potentialcom" to="vs360_companydomainid" from="vs360_companydomainid" as="PotDoms">
					<attr name="vs360_vs360_companydomain_vs360_potentialcomid" as="PotentialOTMid"/>
				</join>
				<attr name="vs360_name"/>
			</select>

			<for var="dom" in="domains">
				<set var="DomainsDict[dom.vs360_name].IsPotential">X</set>
			</for>
			<set var="LiveLog.Text">     Potential Domains List Loaded: {domains.Count}</set>
			<LiveLog LiveLog="LiveLog"/>

			<set var="LiveLog.Text">Full Domains Dictionary Loaded: {DomainsDict.Count}{Utils.NewLine}</set>
			<LiveLog LiveLog="LiveLog"/>
		</if>

		<!-- ******************************************** -->
		<!--      START: Load Statistics Data             -->
		<!-- ******************************************** -->
		<if condition="IncludeCompanyStastics">

			<!-- Get All Opportunites -->
			<select from="{CRM}" entity="opportunity" var="opps">
				<where>
					<condition attr="statecode" op="eq">{0}</condition>
					<if condition="UseHSOAccountField">
						<then>
							<condition attr="vs360_primaryclientid"  op="ex"/>
						</then>
						<else>
							<condition attr="parentaccountid"  op="ex"/>
						</else>
					</if>
				</where>
				<attr name="opportunityid"/>
				<attr name="vs360_primaryclientid"/>
				<attr name="parentaccountid"/>
			</select>
			<set var="LiveLog.Text">   Found {opps.Count} active opportunities.</set>
			<LiveLog LiveLog="LiveLog"/>

			<for var="oppRec" in="opps">
				<if condition="oppRec.vs360_primaryclientid.Id.isSet or oppRec.parentaccountid.Id.isSet">
					<if condition="UseHSOAccountField">
						<then>
							<set var="acctID">{oppRec.vs360_primaryclientid.Id.ToString()}</set>
						</then>
						<else>
							<set var="acctID">{oppRec.parentaccountid.Id.ToString()}</set>
						</else>
					</if>
					<set var="OppsData[acctID]" if="!OppsData.ContainsKey(acctID)">{0}</set>
					<set var="OppsData[acctID]">{OppsData[acctID] + 1}</set>
				</if>
			</for>

			<if condition="UseProjectLead">
				<then>
					<!-- Use HSO Job Leads -->
					<select from="{CRM}" entity="vs360_joblead" var="leads">
						<where>
							<condition attr="statecode" op="eq">{0}</condition>
							<condition attr="vs360_accountid"  op="ex"/>
						</where>
						<attr name="vs360_jobleadid"/>
						<attr name="vs360_accountid"/>
					</select>
					<set var="LiveLog.Text">   Found {leads.Count} active job leads.</set>
					<LiveLog LiveLog="LiveLog"/>

					<for var="leadRec" in="leads">
						<if condition="leadRec.vs360_accountid.Id.isSet">
							<set var="acctID">{leadRec.vs360_accountid.Id.ToString()}</set>
							<set var="LeadsData[acctID]" if="!LeadsData.ContainsKey(acctID)">{0}</set>
							<set var="LeadsData[acctID]">{LeadsData[acctID] + 1}</set>

						</if>
					</for>
				</then>
				<else>
					<!-- Use Microsoft Leads -->
					<select from="{CRM}" entity="lead" var="leads">
						<where>
							<condition attr="statecode" op="eq">{0}</condition>
							<condition attr="accountid"  op="ex"/>
						</where>
						<attr name="leadid"/>
						<attr name="accountid"/>
					</select>
					<set var="LiveLog.Text">   Found {jobs.Count} active jobs.</set>
					<LiveLog LiveLog="LiveLog"/>

					<for var="leadRec" in="leads">
						<if condition="leadRec.accountid.Id.isSet">
							<set var="acctID">{leadRec.accountid.Id.ToString()}</set>
							<set var="LeadsData[acctID]" if="!LeadsData.ContainsKey(acctID)">{0}</set>
							<set var="LeadsData[acctID]">{LeadsData[acctID] + 1}</set>

						</if>
					</for>
				</else>
			</if>

			<!-- Get all Jobs -->
			<select from="{CRM}" entity="vs360_job" var="jobs">
				<where>
					<condition attr="statecode" op="eq">{0}</condition>
					<condition attr="vs360_accountid"  op="ex"/>
				</where>
				<attr name="vs360_jobid"/>
				<attr name="vs360_accountid"/>
			</select>
			<set var="LiveLog.Text">   Found {jobs.Count} active jobs.</set>
			<LiveLog LiveLog="LiveLog"/>

			<for var="jobRec" in="jobs">
				<if condition="jobRec.vs360_accountid.Id.isSet">
					<set var="acctID">{jobRec.vs360_accountid.Id.ToString()}</set>
					<set var="JobsData[acctID]" if="!JobsData.ContainsKey(acctID)">{0}</set>
					<set var="JobsData[acctID]">{JobsData[acctID] + 1}</set>
				</if>
			</for>

		</if>
		<!-- ******************************************** -->
		<!--       END: Load Statistics Data              -->
		<!-- ******************************************** -->


		<!-- Load Contacts -->
		<set var="LiveLog.Text">Reading CRM Contact Data...</set>
		<LiveLog LiveLog="LiveLog"/>

		<select from="{CRM}" entity="contact" var="CrmContacts">
			<where>
				<if condition="!IncludeInactiveContacts">
					<condition attr="statecode" op="eq">{0}</condition>
				</if>
				<condition attr="emailaddress1" op="co">@</condition>
			</where>
			<join type="leftouter" entity="account" to="parentcustomerid" from="accountid" as="comp">
				<attr name="accountnumber" as="CompanyNumber"/>
				<attr name="statecode" as="CompanyStatus"/>
				<if condition="IncludeLegacyID">
					<attr name="{LegacyIDFieldName}" as="LegacyID"/>
				</if>
			</join>
			<attr name="fullname"/>
			<attr name="emailaddress1" as="ContactEmail"/>
			<attr name="parentcustomerid"/>
			<order by="parentcustomerid" desc="true"/>
		</select>
		<set var="LiveLog.Text">     Loaded {CrmContacts.Count} contacts from CRM.</set>
		<LiveLog LiveLog="LiveLog"/>

		<set var="LiveLog.Text">Organizing Contacts Data...</set>
		<LiveLog LiveLog="LiveLog"/>

		<for var="contact" in="CrmContacts">
			<set var="domain">{Utils.Split(contact.ContactEmail, "@")[1].ToLower()}</set>

			<if condition="!IncludeProhibitedDomains">
				<set var="DomainCheck_Result">{new Object()}</set>
				<BlockLists_CheckString
					StringToCheck="domain"
					RulesSet="BlockLists.Domains"
					Result="DomainCheck_Result" />

				<if condition="DomainCheck_Result.Blocked">
					<set var="LiveLog.Text">   Domain {domain} blocked on CRM contact '{contact.fullname}'. Reason: {DomainCheck_Result.BlockReason}</set>
					<LiveLog LiveLog="LiveLog"/>
					<continue/>
				</if>
			</if>

			<set var="DataStorage[domain]" if="!DataStorage.ContainsKey(domain)">{new Dictionary()}</set>

			<set var="companyId">{contact.parentcustomerid.Id.ToString() ?? ''}</set>
			<set var="companyName">{contact.parentcustomerid.Name ?? ''}</set>
			<if condition="IncludeLegacyID">
				<set var="companyLegacyID">{contact.comp.LegacyID ?? ''}</set>
			</if>

			<set var="DataStorage[domain][companyId]" if="!DataStorage[domain].ContainsKey(companyId)">
				<attr name="CrmCompanyName">{companyName}</attr>
				<attr name="CrmCompanyNumber">{contact.CompanyNumber ?? ''}</attr>
				<attr name="CrmCompanyStatus">{contact.CompanyStatus.Value ?? 0}</attr>
				<if condition="IncludeLegacyID">
					<attr name="CrmCompanyLegacyID">{companyLegacyID ?? ''}</attr>
				</if>
				<attr name="ExchangePotentialCompanyNames"></attr>
				<attr name="CrmContactsCount">{0}</attr>
				<attr name="ExchangeContactsCount">{0}</attr>
				<attr name="ExchangeEmailsCount">{0}</attr>
				<attr name="ExchangeEmployeesCount">{0}</attr>
				<attr name="DomainDuplicate"/>
				<attr name="DomainOwner"/>
				<if condition="IncludeCompanyStastics eq true">
					<attr name="OpportunitiesCount">{OppsData[companyId] ?? 0}</attr>
					<attr name="LeadsCount">{LeadsData[companyId] ?? 0}</attr>
					<attr name="JobsCount">{JobsData[companyId] ?? 0}</attr>
				</if>
			</set>

			<set var="DataStorage[domain][companyId].CrmContactsCount">{DataStorage[domain][companyId].CrmContactsCount + 1}</set>
		</for>

		<set var="LiveLog.Text">     Organization complete. {Utils.NewLine}</set>
		<LiveLog LiveLog="LiveLog"/>

		<!-- Select Companies that have no contacts for adding to report with NO domain -->
		<set var="LiveLog.Text">Loading Companies with NO contacts...</set>
		<LiveLog LiveLog="LiveLog"/>

		<select from="crm" entity="account" var="noDomAccts">
			<where>
				<condition attr="statecode" op="eq">{0}</condition>
				<condition attr="contactid" op="null" entityname="contacts" />
			</where>
			<join type="outer" entity="contact" to="accountid" from="parentcustomerid" as="contacts" />
			<attr name="accountid"/>
			<attr name="accountnumber"/>
			<attr name="name"/>
			<attr name="statecode"/>
			<if condition="IncludeLegacyID">
				<attr name="{LegacyIDFieldName}" as="LegacyID"/>
			</if>

		</select>
		<set var="LiveLog.Text">     Found {noDomAccts.Count} companies with no contacts.</set>
		<LiveLog LiveLog="LiveLog"/>

		<!-- Add companies with no Contacts with blank domain key to the full list for processing -->
		<!-- These companies will all show in the report with an empty domain name. -->
		<set var="DataStorage[emptyDomain]" if="!DataStorage.ContainsKey(emptyDomain)">{new Dictionary()}</set>
		<for var="noDomAcct" in="noDomAccts">
			<sandbox>
				<set var="strAcctID">{noDomAcct.accountid.ToString()}</set>
				<set var="DataStorage[emptyDomain][strAcctID]" if="!DataStorage[emptyDomain].ContainsKey(strAcctID)">
					<attr name="CrmCompanyName">{noDomAcct.name}</attr>
					<attr name="CrmCompanyNumber">{noDomAcct.accountnumber ?? ''}</attr>
					<attr name="CrmCompanyStatus">{noDomAcct.statecode ?? 0}</attr>
					<if condition="IncludeLegacyID">
						<attr name="CrmCompanyLegacyID">{noDomAcct.LegacyID ?? ''}</attr>
					</if>
					<attr name="ExchangePotentialCompanyNames"></attr>
					<attr name="CrmContactsCount">{0}</attr>
					<attr name="ExchangeContactsCount">{0}</attr>
					<attr name="ExchangeEmailsCount">{0}</attr>
					<attr name="ExchangeEmployeesCount">{0}</attr>
					<attr name="DomainDuplicate"/>
					<attr name="DomainOwner"/>
					<if condition="IncludeCompanyStastics eq true">
						<attr name="OpportunitiesCount">{OppsData[strAcctID] ?? 0}</attr>
						<attr name="LeadsCount">{LeadsData[strAcctID] ?? 0}</attr>
						<attr name="JobsCount">{JobsData[strAcctID] ?? 0}</attr>
					</if>
				</set>
			</sandbox>
		</for>

		<!--Leave companies with the maximum number of contacts by domain-->
		<if condition="CleanupCompaniesByContactsCount">
			<set var="LiveLog.Text">Determing Domain Winners...</set>
			<LiveLog LiveLog="LiveLog"/>
			<for var="rec" in="DataStorage">
				<set var="companies">{rec.Value}</set>

				<!--1. FIND MAX COUNT-->
				<set var="maxContactsCount">{0}</set>
				<for var="company" in="companies">
					<set var="maxContactsCount" if="maxContactsCount lt company.Value.CrmContactsCount">{company.Value.CrmContactsCount}</set>
				</for>

				<!--2. Find LOSERS-->
				<set var="losersList">{new List()}</set>
				<for var="company" in="companies">
					<set var="losersList[]" if="company.Value.CrmContactsCount lt maxContactsCount">{company.Key}</set>
				</for>

				<!--3. DELETE LOSERS FROM DATA STORAGE-->
				<for var="loser" in="losersList">
					<set>{companies.Remove(loser)}</set>
				</for>

			</for>
		</if>

		<set var="LiveLog.Text">Marking Domain Winners...</set>
		<LiveLog LiveLog="LiveLog"/>

		<!-- NEW: Mark winning company within each domain grouping for multiple company domains -->
		<for var="rec" in="DataStorage">
			<if condition="rec.Key.isSet and Utils.ToLower(rec.Key) ne Utils.ToLower(emptyDomain)">

				<set var="companies">{rec.Value}</set>

				<if condition="companies.Count > 1">
					<!--1. FIND MAX COUNT Company-->
					<set var="maxContactsCount">{0}</set>
					<set var="winner"/>

					<for var="company" in="companies">
						<!--<set var="maxContactsCount" if="maxContactsCount lt company.Value.CrmContactsCount">{company.Value.CrmContactsCount}</set>-->

						<if condition="maxContactsCount lt company.Value.CrmContactsCount">
							<set var="maxContactsCount">{company.Value.CrmContactsCount}</set>
							<set var="winner">{company}</set>
						</if>
						<set var="company.Value.DomainDuplicate">Y</set>

					</for>

					<if condition="winner.isSet">
						<set var="LiveLog.Text">   No Winner set for Domain {rec.Key}</set>
						<LiveLog LiveLog="LiveLog"/>
						<set var="winner.Value.DomainOwner">Y</set>
						<set var="winner.Value.DomainOwner">Y</set>
					</if>

				</if>

			</if>
		</for>
		<set var="LiveLog.Text">Winners processing complete.{Utils.NewLine}</set>
		<LiveLog LiveLog="LiveLog"/>

	</if>

	<!-- ********************************** -->
	<!-- Process Domains for Exchange Users -->
	<!-- ********************************** -->
	<if condition="AnalyzeExchangeData">

		<if condition="!TeamName.isSet or (TeamName.isSet and TeamName eq '')">
			<exception>TeamName is required</exception>
		</if>
		<sandbox>
			<set var="LiveLog.Text">Loading employees for processing from team ({TeamName})...</set>
			<LiveLog LiveLog="LiveLog"/>


			<!-- Select employee ids from team -->
			<select from="{CRM}" entity="vs360_vs360_employee_team" var="teammemberships">
				<join type="inner" entity="team" to="teamid" from="teamid" as="teams">
					<where>
						<condition attr="name" op="eq">{TeamName}</condition>
					</where>
				</join>
				<join type="inner" entity="vs360_employee" to="vs360_employeeid" from="vs360_employeeid">
					<where>
						<condition attr="emailaddress" op="ex"></condition>
					</where>
					<attr name="vs360_name" as="vs360_name"/>
					<attr name="emailaddress" as="emailaddress"/>
				</join>
				<attr name="vs360_employeeid"/>
			</select>
			<if condition="teammemberships.Count eq 0">
				<exception>No employees in CRM Team ({TeamName})</exception>
			</if>
			<if condition="teammemberships.Count gt 0">
				<for var="teammembership" in="teammemberships">
					<set var="emailList[]">{Utils.ToLower(teammembership.emailaddress)}</set>
				</for>
			</if>
		</sandbox>
		<set var="LiveLog.Text">   {emailList.Count} employees loaded for processing.{Utils.NewLine}</set>
		<LiveLog LiveLog="LiveLog"/>


		<!-- Process each emailbox in list -->
		<set var="empCntr">{0}</set>
		<for var="emailbox" in="emailList">
			<sandbox>
				<set var="empCntr">{empCntr+1}</set>
				<set var="LiveLog.Text">Processing mailbox {empCntr} of {emailList.Count}: {emailbox}</set>
				<LiveLog LiveLog="LiveLog"/>

				<set var="ProcessedDomains">{new Dictionary()}</set>
				<context for="{Exchange}" user="{emailbox}">
					<select from="{Exchange}" entity="contact" var="UserContacts">
						<where>
							<condition attr="email1address" op="co">@</condition>
						</where>
						<attr name="companyname"/>
						<attr name="email1address"/>
						<attr name="email1displayname"/>
					</select>

					<set var="userSMTPs">{new List()}</set>
					<set var="resolutions">{@exchange.ResolveNames(emailbox, 'ActiveDirectory', true)}</set>

					<if condition="resolutions.isSet and resolutions.Count gt 0">
						<for var="adr" in="resolutions[0].Contact.EmailAddresses">
							<set var="tmpAdr">{adr.Value.ToLower()}</set>
							<if condition="tmpAdr.StartsWith('smtp:')">
								<set var="userSMTPs[]">{tmpAdr.Replace('smtp:', '')}</set>
							</if>
						</for>
					</if>

					<set var="PageLimit">{-1}</set>
					<set var="Continue">{true}</set>
					<set var="Page">{0}</set>
					<set var="AllEmails">{new List()}</set>
					<if condition="ProcessEmails">
						<while condition="Continue">

							<select from="{Exchange}" entity="message" var="emails" page="Page" count="PageSize">
								<where>
									<condition attr="received" op="gt">{CutOffDate.ToString("yyyy-MM-ddTHH:mm:ssZ")}</condition>
									<for var="addr" in="userSMTPs">
										<condition attr="senderemailaddress" op="ne">{addr}</condition>
									</for>
									<condition attr="parententryid" op="ne">deleteditems</condition>
									<condition attr="senderemailaddress" op="ex" />
									<condition attr="@BodyResponseType" op="eq">Text</condition>
									<condition attr="@FolderName" op="eq">root/allitems</condition>
								</where>
								<attr name="subject"/>
								<attr name="from"/>
								<attr name="uniquebody"/>
								<order by="received" desc="true"/>
							</select>
							<set var="LiveLog.Text">   Page number: {Page}. {emails.Count} records to add.</set>
							<LiveLog LiveLog="LiveLog"/>

							<for var="e" in="emails">
								<set var="AllEmails[]">{e}</set>
							</for>

							<set var="Page">{Page + 1}</set>
							<set var="Continue" if="emails.Count lt PageSize">{false}</set>
							<set var="Continue" if="PageLimit gt 0 and Page gt PageLimit">{false}</set>
						</while>
					</if>
				</context>

				<set var="LiveLog.Text">   Processing {UserContacts.Count} for mailbox {emailbox}</set>
				<LiveLog LiveLog="LiveLog"/>

				<for var="cnt" in="UserContacts">
					<set var="companyName">{cnt.companyname.Trim() ?? null}</set>

					<set ValidationResult="new Object()" ValidationResult.isInvalid="false" />
					<ProcessX500Emailaddress exContact="cnt" Output="ValidationResult" />
					<continue if="ValidationResult.isInvalid" />

					<set var="domain">{Utils.Split(cnt.email1address,'@')[1].ToLower()}</set>
					<if condition="!IncludeProhibitedDomains">
						<set var="DomainCheck_Result">{new Object()}</set>
						<BlockLists_CheckString
							StringToCheck="domain"
							RulesSet="BlockLists.Domains"
							Result="DomainCheck_Result" />

						<if condition="DomainCheck_Result.Blocked">
							<set var="LiveLog.Text">     Domain {domain} blocked on Exchange contact. Reason: {DomainCheck_Result.BlockReason}</set>
							<LiveLog LiveLog="LiveLog"/>
							<continue/>
						</if>
					</if>

					<set var="ExDataStorage[domain]" if="!ExDataStorage.ContainsKey(domain)">
						<attr name="CompanyNames">{new Dictionary()}</attr>
						<attr name="ContactsCount">{0}</attr>
						<attr name="EmailsCount">{0}</attr>
						<attr name="EmployeesCount">{0}</attr>
					</set>

					<set var="ExDataStorage[domain].CompanyNames[companyName.ToLower()]" if="companyName.isSet">{companyName}</set>
					<set var="ExDataStorage[domain].ContactsCount">{ExDataStorage[domain].ContactsCount + 1}</set>
					<set var="ProcessedDomains[domain]">{null}</set>

				</for>

				<for var="email" in="AllEmails">
					<set var="skip">{!(email.from.isSet and email.from.Item.isSet and email.from.Item.EmailAddress.isSet)}</set>
					<log if="!(email.from.isSet and email.from.Item.isSet and email.from.Item.EmailAddress.isSet)">Email does not contain 'from' field. Skipping...</log>

					<if condition="email.from.isSet and email.from.Item.isSet and email.from.Item.EmailAddress.isSet">
						<set ValidationResult="new Object()" ValidationResult.isInvalid="false" />
						<set var="cnt">
							<attr name="email1address">{email.from.Item.EmailAddress}</attr>
							<attr name="email1displayname">{email.from.Item.EmailAddress}</attr>
						</set>
						<ProcessX500Emailaddress exContact="cnt" Output="ValidationResult" />
						<continue if="ValidationResult.isInvalid" />

						<set var="domain">{Utils.Split(cnt.email1address,'@')[1].ToLower()}</set>
						<if condition="!IncludeProhibitedDomains">
							<set var="DomainCheck_Result">{new Object()}</set>
							<BlockLists_CheckString
								StringToCheck="domain"
								RulesSet="BlockLists.Domains"
								Result="DomainCheck_Result" />

							<if condition="DomainCheck_Result.Blocked">
								<set var="LiveLog.Text">     Domain {domain} blocked on Exchange contact. Reason: {DomainCheck_Result.BlockReason}</set>
								<LiveLog LiveLog="LiveLog"/>
								<continue/>
							</if>
						</if>

						<set var="ExDataStorage[domain]" if="!ExDataStorage.ContainsKey(domain)">
							<attr name="CompanyNames">{new Dictionary()}</attr>
							<attr name="ContactsCount">{0}</attr>
							<attr name="EmailsCount">{0}</attr>
							<attr name="EmployeesCount">{0}</attr>
						</set>

						<set var="ebody">{email.uniquebody}</set>
						<set var="result" if="!SignatureDebugMode">{EmailEngines.Process(email.from.Item.Name, email.from.Item.EmailAddress, ebody)}</set>
						<set var="result" if="SignatureDebugMode">{EmailEngines.ProcessDebug(email.from.Item.Name, email.from.Item.EmailAddress, ebody)}</set>
						<set var="sign">{result.Signature}</set>

						<if condition="sign.Email.isSet and sign.CompanyName.isSet and sign.NameMatch gt 0">
							<then>
								<set var="LiveLog.Text">	Main signature info: {sign.Email} from {sign.CompanyName}</set>
								<LiveLog LiveLog="LiveLog"/>
							</then>
							<else>
								<set var="LiveLog.Text">	Email signature was not recognized.</set>
								<LiveLog LiveLog="LiveLog"/>
							</else>
						</if>

						<set var="companyName"></set>
						<set var="companyName" if="sign.CompanyName.isSet">{sign.CompanyName.ToLower().Trim().Replace("&#xD;", "").Replace("&#xA;", "")}</set>

						<set var="ExDataStorage[domain].CompanyNames[companyName.ToLower()]" if="companyName.isSet">{companyName}</set>
						<set var="ExDataStorage[domain].EmailsCount">{ExDataStorage[domain].EmailsCount + 1}</set>
						<set var="ProcessedDomains[domain]">{null}</set>
					</if>
				</for>
				<for var="domain" in="ProcessedDomains.Keys">
					<set var="ExDataStorage[domain].EmployeesCount">{ExDataStorage[domain].EmployeesCount + 1}</set>
				</for>
			</sandbox>
		</for>
	</if>

	<!--MERGE DATA STORAGE AND EXCHANGE DATA STORAGE-->
	<for var="exDataKvp" in="ExDataStorage">
		<set var="domain">{exDataKvp.Key}</set>
		<set var="exData">{exDataKvp.Value}</set>

		<set var="domainCompanies">{Utils.Join(exData.CompanyNames.Values, ';')}</set>

		<if condition="!DataStorage.ContainsKey(domain)">
			<set var="DataStorage[domain]">{new Dictionary()}</set>
			<set var="DataStorage[domain]['']">
				<attr name="CrmCompanyName"></attr>
				<attr name="CrmCompanyNumber"></attr>
				<attr name="CrmCompanyInactive"></attr>
				<if condition="IncludeLegacyID">
					<attr name="CrmCompanyLegacyID"></attr>
				</if>
				<attr name="ExchangePotentialCompanyNames"></attr>
				<attr name="CrmContactsCount">{0}</attr>
				<attr name="ExchangeContactsCount">{0}</attr>
				<attr name="ExchangeEmailsCount">{0}</attr>
				<attr name="ExchangeEmployeesCount">{0}</attr>
				<attr name="DomainDuplicate"/>
				<attr name="DomainOwner"/>
				<if condition="IncludeCompanyStastics eq true">
					<attr name="OpportunitiesCount"/>
					<attr name="LeadsCount"/>
					<attr name="JobsCount"/>
				</if>
			</set>
		</if>

		<for var="companiesData" in="DataStorage[domain]">
			<set var="companiesData.Value.ExchangePotentialCompanyNames">{domainCompanies}</set>
			<set var="companiesData.Value.ExchangeContactsCount">{exData.ContactsCount}</set>
			<set var="companiesData.Value.ExchangeEmailsCount">{exData.EmailsCount}</set>
			<set var="companiesData.Value.ExchangeEmployeesCount">{exData.EmployeesCount}</set>
		</for>

	</for>


	<set var="LiveLog.Text">{Utils.NewLine}Generating Report...</set>
	<LiveLog LiveLog="LiveLog"/>

	<set var="csvData">{new List()}</set>

	<for var="domainItem" in="DataStorage">
		<set var="domain">{domainItem.Key.ToLower().Trim()}</set>
		<set var="companies">{domainItem.Value}</set>
		<for var="companyItem" in="companies">

			<set var="companyId">{companyItem.Key}</set>
			<set var="companyData">{companyItem.Value}</set>

			<set var="csvRow">{new Dictionary()}</set>

			<set var="csvRow['DomainInvalid']">{0}</set>
			<if condition="Utils.ToLower(domain) eq Utils.ToLower(emptyDomain)">
				<then>
					<set var="csvRow['Domain']"></set>
				</then>
				<else>
					<set var="csvRow['Domain']">{domain}</set>
					<set var="csvRow['DomainInvalid']" if="domain.isSet and !regexDom.IsMatch(domain)">{1}</set>
				</else>
			</if>

			<if condition="CheckExistingCRMDomains">
				<if condition="DomainsDict[domain].Value.isSet">
					<set var="csvRow['Exists']">X</set>
					<set var="csvRow['IsLegacy']">{DomainsDict[domain].Value.IsLegacy}</set>
					<set var="csvRow['IsPreferred']">{DomainsDict[domain].Value.IsPreferred}</set>
					<set var="csvRow['IsPotential']">{DomainsDict[domain].Value.IsPotential}</set>
				</if>
			</if>

			<set var="csvRow['DomainDuplicate']">{companyData.DomainDuplicate}</set>
			<set var="csvRow['DomainOwner']">{companyData.DomainOwner}</set>
			<set var="csvRow['CrmCompanyNumber']">{companyData.CrmCompanyNumber}</set>
			<set var="csvRow['CrmCompanyName']">{companyData.CrmCompanyName}</set>
			<set var="csvRow['CrmCompanyInactive']"/>
			<if condition="companyData.CrmCompanyStatus eq 1">
				<set var="csvRow['CrmCompanyInactive']">INACTIVE</set>
			</if>
			<set var="csvRow['CrmCompanyID']">{companyId}</set>
			<if condition="IncludeLegacyID">
				<set var="csvRow['CrmCompanyLegacyID']">{companyData.CrmCompanyLegacyID}</set>
			</if>
			<set var="csvRow['ExchangePotentialCompanyNames']">{companyData.ExchangePotentialCompanyNames}</set>
			<set var="csvRow['CRMContactsCount']">{companyData.CrmContactsCount}</set>
			<set var="csvRow['ExchangeContactsCount']">{companyData.ExchangeContactsCount}</set>
			<set var="csvRow['ExchangeEmailsCount']">{companyData.ExchangeEmailsCount}</set>
			<set var="csvRow['ExchangeEmployeesCount']">{companyData.ExchangeEmployeesCount}</set>

			<if condition="IncludeCompanyStastics eq true">
				<set var="csvRow['OpportunitiesCount']">{companyData.OpportunitiesCount}</set>
				<set var="csvRow['LeadsCount']">{companyData.LeadsCount}</set>
				<set var="csvRow['JobsCount']">{companyData.JobsCount}</set>
			</if>
			<set var="csvData[]">{csvRow}</set>
		</for>
	</for>

	<set var="result">{Csv.Write(csvData, CRMDomainsReportFile, Encoding.UTF8, ',', '"')}</set>
	<set var="LiveLog.Text">Report Created: {CRMDomainsReportFile}</set>
	<LiveLog LiveLog="LiveLog"/>

	<set var="BlockInfo.Mode">End</set>
	<set var="BlockInfo.LiveLog">{LiveLog}</set>
	<DisplayStartEndBlock BlockInfo="BlockInfo"/>

	<!-- ******************************************** -->
	<!--          CRM Report Run - END              -->
	<!-- ******************************************** -->

</script>