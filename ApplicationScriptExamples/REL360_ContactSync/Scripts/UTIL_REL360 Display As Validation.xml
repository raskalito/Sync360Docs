<script>
	<!--  ******************************* -->
	<!--   SCRIPT CONFIGURATION SECTION   -->
	<!--  ******************************* -->
	<!--   Examine/evaluate carefully     -->
	<!--   prior to running script.       -->
	<!--  ******************************* -->
	<var BlockInfo="new Object()"/>
	<set var="BlockInfo.Title">Exchange Display As Field Validation</set>
	<set var="BlockInfo.Mode">Start</set>
	<DisplayStartEndBlock BlockInfo="BlockInfo"/>
	<set var="OnboadingTeams">{new List()}</set>
	<!--SCRIPT SETTINGS-->
	<set var="RunInLogMode">{true}</set>
	<!--true to run test (log) withiup Exchange records updates-->
	<set var="OnboadingTeams">
		{[
		"SyncTeam 1", "SyncTeam 2", "SyncTeam 3"
		]}
	</set>
	<!--  *********************************** -->
	<!--   END SCRIPT CONFIGURATION SECTION   -->
	<!--  *********************************** -->
	<include name="Ranges/SyncEmployeesContextOnboarding.xml"></include>
	<exception if="!ObjectsForProcessing.isSet">ObjectsForProcessing is missing.</exception>
	<set var="SettingsContainer">{new Object()}</set>
	<call name="@private/GetSettings" Context="SettingsContainer"></call>
	<set var="Settings">{SettingsContainer.Settings}</set>
	<for var="emplKVP" in="ObjectsForProcessing">
		<sandbox>
			<set var="empl">{emplKVP.Value}</set>
			<log>Starting validation for Employee: {empl.Id} ({empl.Email}).</log>
			<context for="exchange" user="{empl.Email}">
				<select from="exchange" entity="contact" var="contacts">
					<where>
						<for var="outCategory" in="Settings.OptOutCategories">
							<not>
								<condition attr="Keywords" op="eq">{outCategory}</condition>
							</not>
						</for>
						<or>
							<condition attr="sensitivity" op="ne">{2}</condition>
							<not>
								<condition attr="sensitivity" op="ex"/>
							</not>
						</or>
						<condition attr="crmid" op="ex"/>
						<!-- <condition attr="crmLinkState" op="eq">{2}</condition> -->
						<condition attr="crmLinkState_vs360" op="eq">{2}</condition>
					</where>
					<attr name="EntryId"/>
					<attr name="firstname"/>
					<attr name="lastname"/>
					<for var="i" in="[1,2,3]">
						<attr name="email{i}address"/>
						<attr name="email{i}fullname"/>
					</for>
				</select>
			</context>
			<log>{contacts.Count} contacts found.</log>
			<for var="c" in="contacts">
				<sandbox>
					<set var="changes">{new Dictionary()}</set>
					<set var="fileas">{Settings.ExchangeFileAs.Replace('firstname', c.firstname ?? '')}</set>
					<set var="fileas">{fileas.Replace('lastname', c.lastname ?? '')}</set>
					<for var="i" in="[1,2,3]">
						<set var="addressFieldName">email{i}address</set>
						<set var="displayFieldName">email{i}fullname</set>
						<if condition="c[addressFieldName].isSet and c[addressFieldName] ne ''">
							<set var="calculatedDisplayAs">{fileas} ({c[addressFieldName]})</set>
							<set var="parts">{Utils.SplitIntoUniqueList(c[displayFieldName],' ')}</set>
							<set var="firstnameFound">{false}</set>
							<set var="firstnameFound" if="!c.firstname.isSet">{true}</set>
							<set var="lastnameFound">{false}</set>
							<set var="lastnameFound" if="!c.lastname.isSet">{true}</set>
							<for var="part" in="parts">
								<if condition="!part.Contains('(')">
									<set var="firstnameFound" if="c.firstname.isSet and part.ToLower().Contains(c.firstname.ToLower())">{true}</set>
									<set var="lastnameFound" if="c.lastname.isSet and part.ToLower().Contains(c.lastname.ToLower())">{true}</set>
								</if>
							</for>
							<set var="needUpdate">{!firstnameFound or !lastnameFound}</set>
							<if condition="needUpdate">
								<set if="c[displayFieldName] ne calculatedDisplayAs" var="changes[i.ToString()]">
									<attr name="Old">{c[displayFieldName]}</attr>
									<attr name="New">{calculatedDisplayAs}</attr>
								</set>
							</if>
						</if>
					</for>
					<if condition="needUpdate">
						<log/>
						<log>  Changes for: {c.firstname ?? ''}, {c.lastname ?? ''} - {c.email1address}:</log>
						<for var="change" in="changes">
							<log>    Email address number: {change.Key}</log>
							<log>       {change.Value.Old}</log>
							<log>       {change.Value.New}</log>
						</for>
					</if>
					<if condition="!RunInLogMode and changes.Count gt 0">
						<set var="updateData">{new Dictionary()}</set>
						<for var="change" in="changes">
							<set var="updateData['email' + change.Key + 'fullname']">{change.Value.New}</set>
						</for>
						<log>    UPDATING: {updateData}</log>
						<context for="exchange" user="{empl.Email}">
							<update in="exchange" entity="contact">
								<where>
									<condition attr="EntryId" op="eq">{c.EntryId}</condition>
								</where>
								<for var="change" in="updateData">
									<attr name="{change.Key}">{change.Value}</attr>
								</for>
							</update>
						</context>
					</if>
				</sandbox>
			</for>
		</sandbox>
	</for>
	<set var="BlockInfo.Mode">End</set>
	<DisplayStartEndBlock BlockInfo="BlockInfo"/>
</script>