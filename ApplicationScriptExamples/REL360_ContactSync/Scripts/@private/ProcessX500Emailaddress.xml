<script>
	<exception if="!exContact.isSet">Exchange contact is missing.</exception>
	<exception if="!Output.isSet">Output contact is missing.</exception>
	
	<set var="Regex">{typeof 'System.Text.RegularExpressions.Regex, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'}</set>
	<set var="leftcurve">{'{'}</set>
	<set var="rightcurve">{'}'}</set>
	<set var="regexex"><![CDATA[(?:[a-z0-9!#$%&'*+/=?^_`{leftcurve}|{rightcurve}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{leftcurve}|{rightcurve}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])]]></set>
	<set var="emailExpr">{new Regex(regexex)}</set>
	
	<set var="emailSets">{new List()}</set>
	<set var="emailSets[]">
		<attr name="primaryField">email1address</attr>
		<attr name="displayField">email1displayname</attr>
		<attr name="isMainField">{true}</attr>
	</set>
	<set var="emailSets[]">
		<attr name="primaryField">email2address</attr>
		<attr name="displayField">email2displayname</attr>
	</set>
	<set var="emailSets[]">
		<attr name="primaryField">email3address</attr>
		<attr name="displayField">email3displayname</attr>
	</set>
	
	
	<for var="emailSet" in="emailSets">
		<if condition="exContact[emailSet.primaryField].isSet">
			<set var="emailValidated">{false}</set>
		
			<set var="email">{exContact[emailSet.primaryField]}</set>
			<set var="email" if="email.isSet">{email.ToLower()}</set>
			<set var="emailMatch">{emailExpr.Match(email)}</set>
			<set var="emailValidated">{emailMatch.Success}</set>
			
			<if condition="!emailValidated and exContact[emailSet.displayField].isSet">
				<log>    Email '{email}' was not validated</log>
				
				<set var="emailDisplay">{exContact[emailSet.displayField]}</set>
				<set var="emailDisplayMatch">{emailExpr.Match(emailDisplay)}</set>
				
				<set var="emailValidated">{emailDisplayMatch.Success}</set>
				
				<log if="!emailValidated">    Display Email '{emailDisplay}' was not validated.</log>
				<log if="emailValidated">    Display Email '{emailDisplay}' was validated and will be used as {emailSet.primaryField}.</log>
				
				<set var="exContact[emailSet.primaryField]" if="emailValidated">{emailDisplay}</set>
			</if>
			
			<set var="Output.isInvalid" if="emailSet.isMainField.isSet and emailSet.isMainField eq true">{!emailValidated}</set>
			<!--<if condition="!emailValidated">
				<sandbox>
					<log>    Executing ResolveNames request for '{email}'...</log>
					
					<context for="exchange" user="{Employee.Email}">
						<set var="resolutions">{@exchange.ResolveNames(email, 'ActiveDirectory', true)}</set>
					</context>

					<if condition="resolutions.isSet and resolutions.Count gt 0">
						<for var="adr" in="resolutions[0].Contact.EmailAddresses">
							<set var="tmpAdr">{adr.Value.ToLower()}</set>
							<if condition="tmpAdr.StartsWith('smtp:')">
								<set var="resolvedAddr">{tmpAdr.Replace('smtp:', '')}</set>
								<log>        Resolved SMTP name '{resolvedAddr}' will be used as email1address</log>
								<set var="exContact.email1address">{resolvedAddr}</set>
								<break/>
							</if>
						</for>
					</if>
				</sandbox>
			</if>-->
		</if>
	</for>
	
</script>