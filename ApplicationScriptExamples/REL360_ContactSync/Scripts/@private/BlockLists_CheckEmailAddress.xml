<script>
    <exception if="!EmailAddress.isSet">EmailAddress is not defined.</exception>
    <exception if="!BlockLists.isSet">BlockLists is not defined.</exception>
	<exception if="!Result.isSet">Result argument is not defined.</exception>
	
	
	<set Result.Blocked="false" 
		 Result.BlockReason="''"/>
		 
		 
	<set var="emailToCheck">{EmailAddress.ToLower()}</set>
	
	<set FullEmailCheck_Result="new Object()" />
	<BlockLists_CheckString 
		StringToCheck="emailToCheck" 
		RulesSet="BlockLists.EmailAddress" 
		Result="FullEmailCheck_Result" />
	
	<if condition="!FullEmailCheck_Result.Blocked">
		<then>
			<set var="CurrentDomain">{Utils.Split(emailToCheck, '@')[1]}</set>
			<set var="CurrentEmailName">{Utils.Split(emailToCheck, '@')[0]}</set>
			
			<set EmailNameCheck_Result="new Object()" />
			<BlockLists_CheckString 
				StringToCheck="CurrentEmailName" 
				RulesSet="BlockLists.EmailNames" 
				Result="EmailNameCheck_Result" />
				
			
			<if condition="!EmailNameCheck_Result.Blocked">
				<then>
					<set EmailDomainCheck_Result="new Object()" />
					<BlockLists_CheckString 
						StringToCheck="CurrentDomain" 
						RulesSet="BlockLists.Domains" 
						Result="EmailDomainCheck_Result" />
						
					<if condition="EmailDomainCheck_Result.Blocked">
                        <set var="Result.Blocked">{true}</set>
						<set var="Result.BlockReason">{FullEmailCheck_Result.BlockReason} (Email domain).</set>
                    </if>
				</then>
				<else>
					<set var="Result.Blocked">{true}</set>
					<set var="Result.BlockReason">{FullEmailCheck_Result.BlockReason} (Email name).</set>
				</else>
			</if>
		</then>
		<else>
			<set var="Result.Blocked">{true}</set>
			<set var="Result.BlockReason">{FullEmailCheck_Result.BlockReason} (Full email address).</set>
		</else>
	</if>
</script>