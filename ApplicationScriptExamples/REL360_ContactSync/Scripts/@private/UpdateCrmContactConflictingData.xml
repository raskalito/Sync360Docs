<!--UpdateExchangeContactConflictingData-->
<!-- 
		Call Example:
      <var CallObject='new Object()'/>
      <set var="CallObject.Contactid">{'4E412729-6769-E611-80F0-5065F38B11C1' as 'Guid'}</set>
      <set var="CallObject.Mapping">{Mapping}</set>
      <set var="CallObject.ExContact">{ExContact}</set>
      <set var="CallObject.Employee">{Employee}</set>
      <set var="CallObject.PrivateFields">{PrivateFields}</set>
      <set var="CallObject.IsOnboarding">{IsOnboarding}</set>
      <call name="UpdateExchangeContactConflictingData" CallObject="CallObject"/>
-->

<script>

	<set var="Mapping">{CallObject.Mapping}</set>
	<set var="ExContact">{CallObject.ExContact}</set>
	<set var="Employee">{CallObject.Employee}</set>
	<set var="Settings">{CallObject.Settings}</set>
	
	<!--CRM CONTEXT MUST BE EMPTY FOR ONBOARDING-->
	<context for="crm" user="{CallObject.IsOnboarding ? '' : Employee.Id}">
	<select from="crm" entity="contact" var="existingCrmContacts">
		<where>
			<condition attr="contactid" op="eq">{CallObject.Contactid}</condition>
		</where>
		<attr name="contactid" />
		<attr name="parentcustomerid" />
		
		<for var="mapping" in="Mapping.ContactMapping">
			<if condition="!mapping.Multiline.isSet">
				<attr name="{mapping.Crm}" />
			</if>
		</for>
		<for var="mapping" in="Mapping.ContactMultiLineMapping">
			<for var="multiLineMapping" in="mapping.Crm">
				<attr name="{multiLineMapping}" />
			</for>
		</for>
	</select>
	</context>

	<set var="crmContact">{existingCrmContacts[0]}</set>
  
	<set var="mappingsToProcess">{new List()}</set>
	
	<set var="crmChanges">{new Dictionary()}</set>
	<set var="multiLineMappingsValues">{new List()}</set>
	
	<!-- Simple mapping -->
	<for var="mapping" in="Mapping.ContactMapping">
		<!-- CRM doesn't equal to exchange -->
		<set mappingValue="ExContact[mapping.Exchange]"/>
		<if condition="crmContact[mapping.Crm].isSet and ExContact[mapping.Exchange].isSet">
			<set crmValue="crmContact[mapping.Crm]"/>
			<set exValue="null"/>
			
			<set var="exValue" if="mapping.Type eq 'String' and mapping.ExchangeType eq 'String'">{mappingValue.Replace("&#xD;&#xA;", "&#xA;").Replace("&#xA;", "&#xD;&#xA;").TrimEnd()}</set>
			<set var="exValue" if="mapping.Type eq 'String' and mapping.ExchangeType eq 'Array'">{Utils.Join(mappingValue, ', ')}</set>
			<set var="exValue" if="mapping.Type eq 'DateTime' and mapping.ExchangeType eq 'DateTime'">{Utils.StringToDate(mappingValue, "yyyy-MM-dd'T'HH:mm:ss'Z'")}</set>
			
			<if condition="crmValue != exValue">
				<set var="crmChanges[mapping.Crm]">{exValue}</set>
			</if>
		</if>
		<!-- Exchange contains data. CRM is empty -->
		<if condition="!crmContact[mapping.Crm].isSet and ExContact[mapping.Exchange].isSet">
			<set var="crmChanges[mapping.Crm]" if="mapping.Type eq 'String' and mapping.ExchangeType eq 'String'">{mappingValue.Replace("&#xD;&#xA;", "&#xA;").Replace("&#xA;", "&#xD;&#xA;").TrimEnd()}</set>
			<set var="crmChanges[mapping.Crm]" if="mapping.Type eq 'String' and mapping.ExchangeType eq 'Array'">{Utils.Join(mappingValue, ', ')}</set>
			<set var="crmChanges[mapping.Crm]" if="mapping.Type eq 'DateTime' and mapping.ExchangeType eq 'DateTime'">{Utils.StringToDate(mappingValue, "yyyy-MM-dd'T'HH:mm:ss'Z'")}</set>
		</if>
	</for>

	<!-- Company mapping -->
  <set var="crmCompany">{crmContact.parentcustomerid.Name ?? ''}</set>

  <if condition="crmCompany eq '' and CallObject.AssociatedAccount.isSet">
    <set var="crmChanges['parentcustomerid']">account:{CallObject.AssociatedAccount.Id}</set>
  </if>


  <if condition="crmChanges.ContainsKey('emailaddress1') and CallObject.AssociatedAccount.isSet">
    <set var="crmDomain">{Utils.Split(crmContact['emailaddress1'], '@')[1].ToLower() ?? null}</set>
    <set var="exDomain">{Utils.Split(ExContact['email1address'], '@')[1].ToLower() ?? null}</set>

    <if condition="crmDomain ne exDomain">
      <set var="crmChanges['parentcustomerid']">account:{CallObject.AssociatedAccount.Id}</set>
    </if>
  </if>
	
	<if condition="Settings.ImageSync">
		<if condition="ExContact.hasattachments eq 'true'">
			<context for="exchange" user="{Employee.Email}">
				<set var="atts">{@exchange.GetAttachments(ExContact.attachments)}</set>
			</context>
			
			<for var="at" in="atts">
				<set var="picture" if="at.Name eq 'ContactPicture.jpg' and at.ContentType eq 'image/jpeg'">{at}</set>
			</for>
			
			<if condition="picture.isSet">
				<set var="crmChanges['entityimage']">{picture.Content}</set>
			</if>
		</if>
	</if>
	
	
	<if condition="crmChanges.Count gt 0">
		<if condition="!CallObject.IsOnboarding">
            <context for="crm" user="{Employee.Id}">
				<update in="crm" entity="contact">
					<where>
						<condition attr="contactid" op="eq">{crmContact.contactid}</condition>
					</where>
					<for var="crmChange" in="crmChanges">
						<attr name="{crmChange.Key}">{crmChange.Value}</attr>
					</for>
					<attr name="vs360_modifiedbyemployeeid">vs360_employee:{Employee.Id}</attr>
				</update>
			</context>
        </if>
        
		<if condition="CallObject.IsOnboarding">
			<!--NEED TO SKIP PRIVATE DATA FOR ONBOARDING-->
            <set var="contactChanges">{new Dictionary()}</set>
			<set var="relationshipChanges">{new Dictionary()}</set>
			
			<for var="crmChangeField" in="crmChanges">
			
				<if condition="!CallObject.PrivateFields.Contains(crmChangeField.Key)">
                    <set var="contactChanges[crmChangeField.Key]">{crmChangeField.Value}</set>
                </if>

			</for>
			
			<if condition="contactChanges.Count gt 0">
				<update in="crm" entity="contact">
					<where>
						<condition attr="contactid" op="eq">{crmContact.contactid}</condition>
					</where>
					<for var="contactChange" in="contactChanges">
						<attr name="{contactChange.Key}">{contactChange.Value}</attr>
					</for>
					<attr name="vs360_modifiedbyemployeeid">vs360_employee:{Employee.Id}</attr>
				</update>
			</if>
        </if>
    </if>
</script>