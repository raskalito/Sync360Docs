<!-- NotificationEmail_Create.xml -->
<!-- 
	Call Example:
		<set var="NotificationEmailParameters.Settings">{settings}</set>
		<var NotificationEmailParameters='new Object()'/>
		<set var="NotificationEmailParameters.ExchangeContact">{excontact}</set>
		<set var="NotificationEmailParameters.CrmContactId">{contacts[0].contactid}</set>
		<set var="NotificationEmailParameters.CrmServer">crm</set>
		<set var="NotificationEmailParameters.RecipientEmployee">{Employee}</set>
		<call name="NotificationEmail_Create" CallObject="NotificationEmailParameters"/>
-->

<script>

	<sandbox>

		<if condition="!CallObject.isSet">
			<exception>CallObject is required</exception>
		</if>

		<set var="Mappings">{new List()}</set>
		<NotificationEmail_InitializeMappings Mappings="Mappings"/>

		<!-- Get CRM contact -->
		<select from="{CallObject.CrmServer}" entity="contact" var="contacts">
			<where>
				<condition attr="contactid" op="eq">{CallObject.CrmContactId}</condition>
			</where>
			<for var="mapping" in="Mappings">
				<attr name="{mapping.crm}" if="mapping.crm.isSet"/>
			</for>
			<attr name="contactid" />
		</select>

		<if condition="contacts.Count == 0">
			<exception>No CRM contact found.</exception>
		</if>

		<set var="crmContact">{contacts[0]}</set>
		
		<set var="brHtml">
			<![CDATA[ <br/> ]]>
		</set>
		<set var="leftCurveBr">{'{'}</set>
		<set var="rightCurveBr">}</set>

		<!--Subject – Duplicate Contact-->
		<set var="emailSubject">Duplicate Contact found:</set>

		<!--Top Message – Duplicate Contact-->
		<set var="emailTopMessage">
			<![CDATA[ You attempted to create a contact for <Full Name> that already matches an existing contact in CRM. As a result, your contact has been updated with the information below that already exists.  If you feel this information is incorrect you can update it either in your Outlook Contacts or in CRM and that updated information will be sync'd accordingly. ]]>
		</set>

		<!--Bottom Message – Duplicate Contact-->
		<set var="emailBottomMessage">
			<![CDATA[ Should you need to update any of the existing information for this contact, click on the following link to do so ]]>
		</set>
    
		<for var="mapping" in="Mappings">
		
			<if condition="mapping.crm.isSet">

				<!-- Join FullName to Subject -->
				<if condition="mapping.crm eq 'fullname' and crmContact[mapping.crm].isSet">
					<set var="emailSubject">{emailSubject}{' '}{crmContact[mapping.crm]}</set>
				</if>

				<!-- Add new lines -->
				<if condition="crmContact[mapping.crm].isSet and !mapping.crm_fieldtype.isSet">
					<set var="crmContact[mapping.crm]">{Utils.Replace(crmContact[mapping.crm], Utils.NewLine, brHtml)}</set>
				</if>

			</if>
			
		</for>

		<set var="emailHtmlDescription">
		  <![CDATA[
			<html>
			  <head>
				<meta charset='utf-8'>
				<style>
				  table {leftCurveBr}
					text-align: Left; 
					border: 1px solid black;
					border-spacing: 0;
					border-collapse: collapse;
					{rightCurveBr}

				  table td {leftCurveBr}
					border: 1px solid black;
					padding-left: 5px;
					{rightCurveBr}
				</style>
			  </head>
			  <body>
				<div>
				  #EmailTopMessage#
				</div>
				<br/>
				<table>
				  <tr>
					<td style='width: 137px;'></td>
					<td style='width: 324px; font-weight: bold;'>Current Contact in CRM You Received</td>
					<td style='width: 354px; font-weight: bold;'>Duplicate Contact You Attempted To Create</td>
				  </tr>
				  <tr>
					<td>Full Name:</td>
					<td>#FullNameCurrent#</td>
					<td>#FirstNameDuplicate# #LastNameDuplicate#</td>
				  </tr>
				  <tr>
					<td>Job Title:</td>
					<td>#JobTitleCurrent#</td>
					<td>#JobTitleDuplicate#</td>
				  </tr>
				  <tr>
					<td>Company Name:</td>
					<td>#CompanyNameCurrent#</td>
					<td>#CompanyNameDuplicate#</td>
				  </tr>
				  <tr>
					<td>Department:</td>
					<td>#DepartmentCurrent#</td>
					<td>#DepartmentDuplicate#</td>
				  </tr>
				  <tr>
					<td>Email:</td>
					<td><a href='#EmailCurrent#'>#EmailCurrent#</a></td>
					<td><a href='#EmailDuplicate#'>#EmailDuplicate#</a></td>
				  </tr>
				  <tr>
					<td>Business Phone:</td>
					<td>#BusinessPhoneCurrent#</td>
					<td>#BusinessPhoneDuplicate#</td>
				  </tr>
				  <tr>
					<td>Mobile Phone:</td>
					<td>#MobilePhoneCurrent#</td>
					<td>#MobilePhoneDuplicate#</td>
				  </tr>
				  <tr>
					<td>Physical Address:</td>
					<td>#PhysicalAddressCurrent#</td>
					<td>
					  <span>
						#AddressDuplicate#<br/>
						#CityDuplicate# #StateDuplicate# #ZipDuplicate# #CountryDuplicate#
					  </span>
					</td>
				  </tr>
				</table>
				<br/>
				<div>
				  #EmailBottomMessage#<br/>
				  <a href='#ContactCrmUrl#'>#FullNameCurrent#</a>
				</div>
			  </body>  
			</html>
		  ]]>
		</set>

		<!--Fill HTML body-->
		<for var="mapping" in="Mappings">
		
			<!--CRM-->
			<if condition="mapping.crm.isSet">
				<if condition="crmContact[mapping.crm].isSet and mapping.crm_fieldtype.isSet and mapping.crm_fieldtype == 'lookup'">
					<set var="emailHtmlDescription">{Utils.Replace(emailHtmlDescription, mapping.html_crm, crmContact[mapping.crm].Name)}</set>
				</if>
				<if condition="crmContact[mapping.crm].isSet and !mapping.crm_fieldtype.isSet">
					<set var="emailHtmlDescription">{Utils.Replace(emailHtmlDescription, mapping.html_crm, crmContact[mapping.crm])}</set>
				</if>
				<if condition="!crmContact[mapping.crm].isSet">
					<set var="emailHtmlDescription">{Utils.Replace(emailHtmlDescription, mapping.html_crm, '')}</set>
				</if>
			</if>

			<!--Exchange-->
			<if condition="mapping.exchange.isSet">
				<if condition="CallObject.ExchangeContact[mapping.exchange].isSet">
					<set var="emailHtmlDescription" if="CallObject.ExchangeContact[mapping.exchange].GetType().Name eq 'String'">{Utils.Replace(emailHtmlDescription, mapping.html_exchange, CallObject.ExchangeContact[mapping.exchange])}</set>
					<set var="emailHtmlDescription" if="CallObject.ExchangeContact[mapping.exchange].GetType().Name eq 'String[]'">{Utils.Replace(emailHtmlDescription, mapping.html_exchange, Utils.Join(CallObject.ExchangeContact[mapping.exchange]), ', ')}</set>
				</if>
				<if condition="!CallObject.ExchangeContact[mapping.exchange].isSet">
					<set var="emailHtmlDescription">{Utils.Replace(emailHtmlDescription, mapping.html_exchange, '')}</set>
				</if>
			</if>
				
		</for>

		<set var="contactCrmUrl" if="@crm.Connection.IsClaimsBased eq false">{@crm.Connection.CrmUrl}{@crm.Connection.OrganizationName}{"/main.aspx?etn=contact&amp;pagetype=entityrecord&amp;id="}{CallObject.CrmContactId.ToString()}</set>
		<set var="contactCrmUrl" if="@crm.Connection.IsClaimsBased eq true">{@crm.Connection.CrmUrl}{"main.aspx?etn=contact&amp;pagetype=entityrecord&amp;id="}{CallObject.CrmContactId.ToString()}</set>
		<set var="emailHtmlDescription">{Utils.Replace(emailHtmlDescription, "#ContactCrmUrl#", contactCrmUrl)}</set>
		<set var="emailHtmlDescription">{Utils.Replace(emailHtmlDescription, "#EmailTopMessage#", emailTopMessage)}</set>
		<set var="emailHtmlDescription">{Utils.Replace(emailHtmlDescription, "#EmailBottomMessage#", emailBottomMessage)}</set>
	
		<!-- Send Email Method = SMTP -->
		<if condition="CallObject.Settings.SendEmailNotificationMethod.ToLower() eq 'smtp' and CallObject.Settings.SMTPPort.isSet and CallObject.Settings.SMTPServer.isSet and CallObject.Settings.SMTPEmailFrom.isSet">
		
			<set var="MailAddress">{typeof 'System.Net.Mail.MailAddress, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'}</set>
			<set var="SmtpDeliveryMethod">{typeof 'System.Net.Mail.SmtpDeliveryMethod, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'}</set>
			<set var="MailMessage">{typeof 'System.Net.Mail.MailMessage, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'}</set>
			<set var="SmtpClient">{typeof 'System.Net.Mail.SmtpClient, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'}</set>
			
			<set var="smtpClient">{new SmtpClient()}</set>
			<set var="smtpClient.Port">{CallObject.Settings.SMTPPort as 'int'}</set>
			<set var="smtpClient.DeliveryMethod">{new SmtpDeliveryMethod()}</set>
			<set var="smtpClient.Host">{CallObject.Settings.SMTPServer}</set>
			<set var="smtpClient.UseDefaultCredentials">{true}</set>
			
			<set var="mail">{new MailMessage()}</set>
			<set var="mail.IsBodyHtml">{true}</set>
			<set var="mail.Subject">{emailSubject}</set>
			<set var="mail.From">{new MailAddress(CallObject.Settings.SMTPEmailFrom)}</set>
			
			<if condition="CallObject.SendToRecipients ne ''">
				<then>
					<set var="recipients">{Utils.SplitIntoUniqueList(CallObject.SendToRecipients, ',')}</set>
					<for var="email" in="recipients">
						<set>{mail.To.Add(new MailAddress(email))}</set>
					</for>
				</then>
				<else>
					<set>{mail.To.Add(new MailAddress(CallObject.RecipientEmployee.Email))}</set>
				</else>
			</if>

			<set var="mail.Body">{emailHtmlDescription}</set>
			<set>{smtpClient.Send(mail)}</set>
		
		</if>
	
		<!-- Send Email Method = CRMEmailActivity -->
		<if condition="CallObject.Settings.SendEmailNotificationMethod.ToLower() eq 'crmemailactivity' and CallObject.Settings.CRMEmailActivityFromUserID.isSet">
	
			<!-- Check if the user is presented -->
			<select from="crm" entity="systemuser" var="sysUsers">
				<where>
					<condition attr="systemuserid" op="eq">{CallObject.Settings.CRMEmailActivityFromUserID.Trim()}</condition>
				</where>
			</select>
		
			<if condition="sysUsers.Count gt 0">

				<!-- Notify the user using email message -->
				<context for="{CallObject.CrmServer}" user="{sysUsers[0].systemuserid as 'string'}">

					<create in="{CallObject.CrmServer}" entity="email" var="emailid">
						<attr name="from">{['systemuser:'+sysUsers[0].systemuserid]}</attr>
						<if condition="CallObject.SendToRecipients ne ''">
							<then>
								<attr name="to">{CallObject.SendToRecipients}</attr>
							</then>
							<else>
								<attr name="to">{['vs360_employee:'+CallObject.RecipientEmployee.Id]}</attr>
							</else>
						</if>
						<attr name="subject">{emailSubject}</attr>
						<attr name="description">{emailHtmlDescription}</attr>
					</create>

					<set>{@crm.ExecuteSendEmailRequest(emailid, '', true)}</set>

				</context>
			</if>
		</if>

		<onerror var="ex">
			<log>One or more errors occurred while processing the CreateDuplicateContactNotificationEmail.</log>
			<if condition="ex.isSet">
				<log>Ex: {ex}</log>
			</if>
		</onerror>
		
	</sandbox>

</script>