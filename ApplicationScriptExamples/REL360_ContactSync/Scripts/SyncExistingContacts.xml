<script>

  <!--              CONFIGURATION SECTION                   -->
  <set var="ManualMode">{false}</set> <!--USE FOR DEVELOPMENT/MANUAL DEBUG-->
  <if condition="!Context.isSet">
    <var Employee='["EmployeeId" : (Input.ObjectId ?? "a563aa50-48ac-ec11-983f-0022480ace83")]'/>
    <!--<var Employee='["EmployeeId" : (Input.ObjectId ?? "58441ca8-9550-ee11-be6f-000d3a34ec2a")]'/>--> <!--s2s-->
	<!--<var Employee='["EmployeeId" : (Input.ObjectId ?? "64135570-9550-ee11-be6f-000d3a34ec2a")]'/>--> <!--cole-->
    <include name="InitializeContext" />
  </if>
  <!--              CONFIGURATION END                       -->

  <exception if="!Context.isSet">Context parameter is required.</exception>

  <set var="Employee">{Context.Employee}</set>
  <set var="Mapping">{Context.Mapping}</set>
  <set var="Settings">{Context.Settings}</set>
  <set var="PrivateFields">{Context.PrivateFields}</set>

  <log>Sync Existing Contacts script for Employee {Employee.Email} ({Employee.Id}) started.</log>

  <log if="!Settings.ContactSyncEnabled">Contacts Sync is Disabled in Settings.</log>
  <log if="!Settings.DeployedApps.ContactSync">ContactSync is not active in DeployedApps setting.</log>
	
  <if condition="Settings.DeployedApps.Onboarding">
  	<log if="Settings.OnboardingRequestedSyncStop">Contacts Sync is Disabled by Onboarding.</log>
  	<log if="!Employee.IsRolloutCompleted">Employee is waiting for Onboarding.</log>
  </if>
	
  <set var="IsRunAllowed">{
	Settings.ContactSyncEnabled 
	and (Settings.DeployedApps.Onboarding ? (Employee.IsRolloutCompleted and !Settings.OnboardingRequestedSyncStop) : true)  
	and Settings.DeployedApps.ContactSync}</set>

  <set var="IsRunAllowed" if="ManualMode">{true}</set>
  <if condition="IsRunAllowed">
    <set currentSyncDate="Utils.Now.ToUniversalTime()" />
    <sandbox>
      <context for="crm" user="{Employee.UserId}">
        <context for="exchange" user="{Employee.Email}">

          <set contacts="new Dictionary()"/>
          <sandbox>
            <select from="exchange" entity="contact" var="exchangeContacts">
              <where>
				<if condition="Settings.SyncMainFolderOnly eq false">
					<condition attr="parententryid" op="ne">deleteditems</condition>
					<condition attr="@FolderName" op="eq">root/allitems</condition>
					<if condition="Settings.OutlookFolder.isSet and Settings.OutlookFolder ne ''">
						<condition attr="parententryid" op="ne">{Settings.OutlookFolder}</condition>
					</if>
				</if>
                <for var="outCategory" in="Settings.OptOutCategories">
                  <not>
                    <condition attr="Keywords" op="eq">{outCategory}</condition>
                  </not>
                </for>

                <or>
                  <condition attr="sensitivity" op="ne">{2}</condition>
                  <not>
                    <condition attr="sensitivity" op="ex"/>
                  </not>
                </or>
                <condition attr="crmid" op="ex"/>
                <condition attr="lastmodifieddate" op="ge">{Employee.LastSyncDate.ToString("yyyy-MM-ddTHH:mm:ssZ")}</condition>
				<or>
                  <condition attr="crmLinkState_vs360" op="eq">{2}</condition>
                  <condition attr="crmLinkState" op="eq">{2}</condition>
                </or>
              </where>
              <attr name="EntryId"/>
              <attr name="crmid"/>
            </select>

            <log>Exchange modified contacts count {exchangeContacts.Length}</log>

            <for var="c" in="exchangeContacts">
              <NormalizeExchangeContact Contact="c"/>
              <sandbox>
                <set var="newContact">
                  <attr name="CrmId">{c.crmid.Replace('{','').Replace('}','').ToLower()}</attr>
                  <attr name="EntryId">{c.EntryId}</attr>
                </set>
                <set var="contacts[newContact.CrmId]">{newContact}</set>
              </sandbox>
            </for>

            <log>Reading modified contacts from CRM</log>
            <select from="crm" entity="contact" into="crmContacts">
              <where>
                <condition attr="modifiedon" op="ge">{Employee.LastSyncDate}</condition>
                <condition attr="statecode" op="eq">{0}</condition>
              </where>
              <join type="inner" entity="vs360_relationship" to="contactid" from="vs360_contactid">
                <where>
                  <condition attr="vs360_deletedinoutlook" op="eq">{0}</condition>
                  <condition attr="vs360_employeeid" op="eq">{Employee.Id}</condition>
                  <condition attr="statecode" op="eq">{0}</condition>
                </where>
              </join>

              <attr name="fullname" />
              <attr name="contactid" />
            </select>

            <log>CRM modified contacts count {crmContacts.Length}</log>

            <for var="c" in="crmContacts">
              <if condition="!contacts[c.contactid.ToString()].isSet">
                <sandbox>
                  <set newContact="['CrmId' : c.contactid.ToString()]" />
                  <set var="contacts[newContact.CrmId]">{newContact}</set>
                </sandbox>
              </if>
            </for>

          </sandbox>

          <log>{contacts.Count} modified contacts to be processed</log>

          <for var="c" in="contacts">
            <set var="contact">{c.Value}</set>
            <log>Contact to be processed  (CrmId : {contact.CrmId ?? 'unknown'})</log>

            <sandbox>
              <if condition="contact.CrmId.isSet">
                <select from="crm" entity="contact" var="crmContacts">
                  <where>
                    <condition attr="contactid" op="eq">{contact.CrmId}</condition>
                    <condition attr="statecode" op="eq">{0}</condition>
                  </where>
                  <!--this join is required for the approval process by employee-->
                  <join type="inner" entity="vs360_relationship" to="contactid" from="vs360_contactid">
                    <where>
                      <condition attr="vs360_employeeid" op="eq">{Employee.Id}</condition>
                    </where>
                  </join>
                  <attr name="contactid"/>
                  <attr name="parentcustomerid"/>
                  <attr name="fullname"/>
                  <attr name="modifiedon"/>
                  <attr name="vs360_addresstype"/>
                  <for var="p" in="Mapping.ContactMapping">
                    <attr name="{p.Crm}" />
                  </for>
				  <if condition="Settings.ImageSync">
					<attr name="entityimage"/>
                  </if>
                  
                </select>

                <set currentCrmContact="crmContacts[0] ?? null" />
                <!-- if Employee.UserId is null we need to retrieve relationship record with private fields
							and merge this data with current contact -->
                <if condition="Employee.UserId eq '' 
												and Context.PrivateFieldsMapping.isSet
												and Context.PrivateFieldsMapping.Count gt 0 
												and currentCrmContact.contactid.isSet">

                  <select from="crm" entity="vs360_relationship" var="rels">
                    <where>
                      <condition attr="vs360_contactid" op="eq">{currentCrmContact.contactid}</condition>
                      <condition attr="vs360_employeeid" op="eq">{Employee.Id}</condition>
                    </where>
                    <for var="pair" in="Context.PrivateFieldsMapping">
                      <attr name="{pair.PrivateField}" />
                    </for>
                  </select>

                  <if condition="rels.Count gt 0">
                    <set var="relationship">{rels[0]}</set>
                    <for var="pair" in="Context.PrivateFieldsMapping">
                      <if condition="relationship[pair.PrivateField].isSet">
                        <set var="currentCrmContact[pair.ContactField]">{relationship[pair.PrivateField]}</set>
                      </if>
                    </for>
                  </if>
                </if>
              </if>

              <if condition="contact.CrmId.isSet or contact.EntryId.isSet">

                <select from="exchange" entity="contact" var="exchangeContactFull">
                  <where>
					<if condition="Settings.SyncMainFolderOnly eq false">
						<condition attr="parententryid" op="ne">deleteditems</condition>
						<condition attr="@FolderName" op="eq">root/allitems</condition>
						<if condition="Settings.OutlookFolder.isSet and Settings.OutlookFolder ne ''">
							<condition attr="parententryid" op="ne">{Settings.OutlookFolder}</condition>
						</if>
					</if>
                    <condition attr="@BodyResponseType" op="eq">Text</condition>
                    <condition attr="crmid" op="co" if="contact.CrmId.isSet">{contact.CrmId}</condition>
                    <condition attr="EntryId" op="eq" if="contact.EntryId.isSet">{contact.EntryId}</condition>
                    <for var="outCategory" in="Settings.OptOutCategories">
                      <not>
                        <condition attr="Keywords" op="eq">{outCategory}</condition>
                      </not>
                    </for>
                  </where>
                  <attr name="EntryId"/>
                  <attr name="itemid"/>
                  <attr name="crmxml"/>
                  <attr name="crmxml2"/>
                  <attr name="crmxml_vs360"/>
                  <attr name="lastcommitdate"/>
                  <attr name="lastmodifieddate"/>
                  <attr name="Keywords"/>
                  <for var="p" in="Mapping.ContactMapping">
                    <attr name="{p.Exchange}" unless="p.Multiline.isSet" />
                  </for>
                  <attr name="email1displayname"/>
				  <attr name="email2address"/>
				  <attr name="email2displayname"/>
				  <attr name="email3address"/>
				  <attr name="email3displayname"/>
                  <attr name="crmParentAccountId"/>
                  <attr name="crmParentObjectType"/>
                  <attr name="companyname"/>
                  <for var="field" in="['street', 'state', 'postofficebox', 'postalcode', 'country', 'city']">
                    <for var="prefix" in="['work', 'home', 'other']">
                      <attr name="{prefix}address{field}" />
                    </for>
                  </for>
                  <attr name="hasattachments"/>
                  <attr name="attachments"/>
				  <attr name="crmLinkState_vs360"/>
			      <attr name="crmLinkState"/>
                </select>
                <set var="currentExchangeContact">{exchangeContactFull[0] ?? null}</set>


                <if condition="currentExchangeContact.isSet">
                  <set ValidationResult="new Object()" ValidationResult.isInvalid="false" />
                  <ProcessX500Emailaddress exContact="currentExchangeContact" Output="ValidationResult"/>
                </if>

              </if>

              <if condition="currentCrmContact.isSet and currentExchangeContact.isSet">
				
				
				<log>LinkStates: crmLinkState - {currentExchangeContact.crmLinkState ?? 'empty'}; crmLinkState_vs360 - {currentExchangeContact.crmLinkState_vs360 ?? 'empty'}</log>

                <if condition="currentExchangeContact.crmLinkState.isSet and currentExchangeContact.crmLinkState eq '2'
										   and currentExchangeContact.crmLinkState_vs360.isSet and currentExchangeContact.crmLinkState_vs360 eq '2'">

                  <log>        Setting crmLinkState to 0...</log>
                  <update in="exchange" entity="contact">
                    <where>
                      <condition attr="EntryId" op="eq">{currentExchangeContact.EntryId}</condition>
                    </where>
                    <attr name="crmLinkState">{0}</attr>
                  </update>
                </if>

                <if condition="currentExchangeContact.crmLinkState.isSet 
										   and currentExchangeContact.crmLinkState eq '2'
										   and (!currentExchangeContact.crmLinkState_vs360.isSet or currentExchangeContact.crmLinkState_vs360 eq '0')">

                  <log>Exchange contact was tracked by Server Side Sync.</log>


                  <set var="ExecutionResults">{new Object()}</set>
                  <HandleServerSideSyncTracking
										ExchangeContact="currentExchangeContact"
										CrmContact="currentCrmContact"
										Mapping="Mapping"
										PrivateFields="PrivateFields"
										Employee="Employee"
										Settings="Settings"
										Results="ExecutionResults" />

                  <if condition="Results.OriginalContact.isSet">
                    <log>Contact was merged with original.</log>
                    <set var="currentCrmContact">{Results.OriginalContact}</set>
                  </if>

                  <if condition="Results.Failed.isSet and Results.Failed eq true">
                    <log>Error... Contact was not merged with original.</log>
                    <continue />
                  </if>
                </if>
				
				
                <for var="mapping" in="Mapping.ContactMultiLineMapping">
				  <set var="cleanValue">{currentExchangeContact[mapping.Exchange].Replace("&#xD;&#xA;", "&#xA;").Replace("&#xD;", "&#xA;") ?? null}</set>
                  <set var="values">{Utils.Split(cleanValue, "&#xA;")}</set>
                  <set var="counter">{0}</set>
                  <for var="crmField" in="mapping.Crm">
                    <set var="value"/>
                    <set var="value" if="counter lt values.Length and values[counter] != '' ">{values[counter]}</set>
                    <set var="currentExchangeContact[crmField]">{value}</set>
                    <set var="counter">{counter+1}</set>
                  </for>
                </for>

                <set var="logDetail"/>
                <set var="logDetail">{logDetail}Current Exchange Contact {currentExchangeContact}&#xD;&#xA;</set>
                <set var="logDetail">{logDetail}Current Crm Contact {currentCrmContact}&#xD;&#xA;</set>
                <log if="Settings.ExtendedLog eq '1'">Current Exchange Contact {currentExchangeContact}</log>
                <log if="Settings.ExtendedLog eq '1'">Current Crm Contact {currentCrmContact}</log>


                <if condition="currentExchangeContact.crmxml_vs360.isSet">
                  <then>
                    <set ref="Xml.FromXml(currentExchangeContact.crmxml_vs360)"/>
                  </then>
                  <else>
                    <set params="new Object()" params.method="'MergeXmls'"
											 params.standard_xml="currentExchangeContact.crmxml ?? ''"
											 params.extended_xml="currentExchangeContact.crmxml2 ?? ''"/>
                    <CrmXmlUtils params="params"/>
                    <set ref="params.contact"/>
                  </else>
                </if>


                <set var="logDetail">{logDetail}Current Ref Contact {ref}&#xD;&#xA;</set>
                <log if="Settings.ExtendedLog eq '1'">Current Ref Contact {ref}</log>

                <set crmChangedOn ="currentCrmContact.modifiedon" />
                <set exchChangedOn="Utils.StringToDate(currentExchangeContact.lastmodifieddate, 'yyyy-MM-ddTHH:mm:ssZ').ToUniversalTime()" />
                <set mergedContact="new Dictionary()" />

                <for var="mapping" in="Mapping.ContactMapping">
                  <set var="ref[mapping.Crm]" if="!ref[mapping.Crm].isSet or (mapping.Type ne 'String' and ref[mapping.Crm] eq '')" >{null}</set>
                  <set var="ref[mapping.Crm]" if="!ref[mapping.Crm].isSet and mapping.Type eq 'String'"></set>

                  <set var="currentCrmContact[mapping.Crm]" if="currentCrmContact[mapping.Crm] eq null and mapping.Type eq 'String'"></set>
                  <set var="currentExchangeContact[mapping.Exchange]" if="currentExchangeContact[mapping.Exchange] eq null and mapping.Type eq 'String'"></set>

                  <set var="ref[mapping.Crm]" if="ref[mapping.Crm].isSet and mapping.Type eq 'DateTime'">{(ref[mapping.Crm] as mapping.Type).ToUniversalTime()}</set>
                  <set var="currentExchangeContact[mapping.Exchange]" if="currentExchangeContact[mapping.Exchange].isSet and mapping.Type eq 'DateTime'">{(currentExchangeContact[mapping.Exchange] as 'DateTime').ToUniversalTime().Date}</set>

                  <set var="ref[mapping.Crm]" if="mapping.Type eq 'String'">{ref[mapping.Crm].Replace("&#xD;&#xA;", "&#xA;").Replace("&#xA;", "&#xD;&#xA;").TrimEnd()}</set>
                  <set var="currentCrmContact[mapping.Crm]" if="mapping.Type eq 'String'">{currentCrmContact[mapping.Crm].Replace("&#xD;&#xA;", "&#xA;").Replace("&#xA;", "&#xD;&#xA;").TrimEnd()}</set>

                  <set var="currentExchangeContact[mapping.Exchange]" if="mapping.Type eq 'String' and mapping.ExchangeType eq 'String'">{currentExchangeContact[mapping.Exchange].Replace("&#xD;&#xA;", "&#xA;").Replace("&#xA;", "&#xD;&#xA;").TrimEnd()}</set>
                  <set var="currentExchangeContact[mapping.Exchange]" if="mapping.Type eq 'String' and mapping.ExchangeType eq 'Array'">{Utils.Join(currentExchangeContact[mapping.Exchange], ', ')}</set>

                  <set var="crmChanged">{currentCrmContact[mapping.Crm] != ref[mapping.Crm]}</set>
                  <set var="exchChanged">{currentExchangeContact[mapping.Exchange] != ref[mapping.Crm]}</set>
                  <set var="crmWon">{crmChanged and (crmChangedOn gt exchChangedOn or !exchChanged)}</set>
                  <set var="exchWon">{exchChanged and (crmChangedOn lt exchChangedOn or !crmChanged)}</set>
                  <set var="mergedContact[mapping.Crm]" if="crmWon or !(crmWon or exchWon)">{currentCrmContact[mapping.Crm]}</set>
                  <set var="mergedContact[mapping.Crm]" if="exchWon">{currentExchangeContact[mapping.Exchange]}</set>

                  <set var="whoWon">None won</set>
                  <set if="crmWon" var="whoWon">Crm won</set>
                  <set if="exchWon" var="whoWon">Exchange won</set>
                  <set var="logDetail">{logDetail}Merge property {mapping.Crm} in crm, {mapping.Exchange} in exchange. {whoWon}"&#xD;&#xA;</set>
                  <log if="Settings.ExtendedLog eq '1'">Merge property {mapping.Crm} in crm, {mapping.Exchange} in exchange. {whoWon}"</log>
                </for>

                <!-- Merging parentcustomerid -->
                <set var="ref['parentcustomerid']">{ref['parentcustomerid'] ?? ''}</set>
                <set var="crmParentRef"></set>
                <set var="crmParentRef" if="currentCrmContact['parentcustomerid'].isSet">{currentCrmContact['parentcustomerid'].LogicalName}:{currentCrmContact['parentcustomerid'].Id.ToString().ToLower()}</set>
                <set var="crmChanged">{crmParentRef != ref['parentcustomerid']}</set>

                <set var="exchParentRef"/>
                <if condition="currentExchangeContact['crmParentAccountId'].isSet and currentExchangeContact['crmParentAccountId'] ne ''">
                  <set var="exchParentRef">account:{currentExchangeContact['crmParentAccountId'].Replace("{", "").Replace("}", "").ToLower()}</set>
                  <set var="exchParentRef" if="currentExchangeContact['crmParentObjectType'] eq '1'">account:{currentExchangeContact['crmParentAccountId'].Replace("{", "").Replace("}", "").ToLower()}</set>
                  <set var="exchParentRef" if="currentExchangeContact['crmParentObjectType'] eq '2'">contact:{currentExchangeContact['crmParentAccountId'].Replace("{", "").Replace("}", "").ToLower()}</set>
                </if>
                <set var="exchChanged">{exchParentRef != ref['parentcustomerid']}</set>

                <set var="crmWon">{crmChanged and (crmChangedOn gt exchChangedOn or !exchChanged)}</set>
                <set var="exchWon">{exchChanged and (crmChangedOn lt exchChangedOn or !crmChanged)}</set>
                <set var="mergedContact['parentcustomerid']" if="crmWon or !(crmWon or exchWon)">{crmParentRef}</set>
                <set var="mergedContact['parentcustomerid']" if="exchWon">{exchParentRef}</set>

                <set var="whoWon">None won</set>
                <set if="crmWon" var="whoWon">Crm won</set>
                <set if="exchWon" var="whoWon">Exchange won</set>
                <set var="logDetail">{logDetail}Merge property parentcustomerid in crm, crmParentAccountId in exchange. {whoWon}&#xD;&#xA;</set>
                <log if="Settings.ExtendedLog eq '1'">Merge property parentcustomerid in crm, crmParentAccountId in exchange. {whoWon}</log>
                <!-- Merging parentcustomerid -->

                <!-- Merging entityimage -->
				<if condition="Settings.ImageSync">
					<set var="SHA256">{static "System.Security.Cryptography.SHA256"}</set>
					<set var="instSHA256">{SHA256.Create()}</set>
					<set var="ref['entityimage']" if="!ref['entityimage'].isSet or ref['entityimage'] eq ''">{null}</set>

					<set var="exchImageHash">{null}</set>
					<set var="exchImage">{null}</set>
					<set var="exchImageId">{null}</set>
					<if condition="currentExchangeContact.hasattachments eq 'true'">
					  <set var="exchAttachments">{@exchange.GetAttachments(currentExchangeContact.attachments)}</set>

					  <for var="at" in="exchAttachments">
						<set var="exchImage" if="at.Name eq 'ContactPicture.jpg' and at.ContentType eq 'image/jpeg'">{at.Content}</set>
						<set var="exchImageHash" if="exchImage ne null">{Utils.ByteArrayToBase64String(instSHA256.ComputeHash(exchImage))}</set>
						<set var="exchImageId" if="exchImage ne null">{at.AttachmentId.Id}</set>
					  </for>
					</if>

					<set var="crmImageHash">{null}</set>
					<set var="crmImage">{null}</set>
					<if condition="currentCrmContact['entityimage'].isSet">
					  <set var="crmImage">{currentCrmContact['entityimage']}</set>
					  <set var="crmImageHash">{Utils.ByteArrayToBase64String(instSHA256.ComputeHash(currentCrmContact['entityimage']))}</set>
					</if>

					<set var="crmChanged">{crmImageHash != ref['entityimage']}</set>
					<set var="exchChanged">{exchImageHash != ref['entityimage']}</set>
					<set var="crmWon">{crmChanged and (crmChangedOn gt exchChangedOn or !exchChanged)}</set>
					<set var="exchWon">{exchChanged and (crmChangedOn lt exchChangedOn or !crmChanged)}</set>
					
					<set var="mergedContact['entityimage']" if="crmWon or !(crmWon or exchWon)">{crmImage}</set>
					<set var="mergedContact['entityimage']" if="exchWon">{exchImage}</set>

					<set var="whoWon">None won</set>
					<set if="crmWon" var="whoWon">Crm won</set>
					<set if="exchWon" var="whoWon">Exchange won</set>
					<set var="logDetail">{logDetail}Merge property entityimage in crm, attachments in exchange. {whoWon}"&#xD;&#xA;</set>
					<log if="Settings.ExtendedLog eq '1'">Merge property entityimage in crm, attachments in exchange. {whoWon}"</log>
				</if>
                <!-- Merging entityimage -->


                <var crmChanges="new Dictionary()"/>
                <var exchChanges="new Dictionary()"/>
                <var refChanges="new Dictionary()"/>

                <!-- Fill Categories changes (Exchange-To-CRM only) -->
                <set var="crmCategoryChanges">{null}</set>

                <if condition="Settings.SyncContactCategories">
                  <set var="refCategoriesString"></set>
                  <set var="refCategoriesString" if="ref['vs360_keywords'].isSet">{ref['vs360_keywords']}</set>
                  <set var="exchangeCategoriesString"></set>

                  <if condition="currentExchangeContact['Keywords'].isSet">
                    <set var="formattedCategories">{new List()}</set>
                    <for var="keyw" in="currentExchangeContact['Keywords']">
                      <set var="formattedCategories[]">"{keyw}"</set>
                    </for>

                    <set var="exchangeCategoriesString">{Utils.Join(formattedCategories, ",")}</set>
                  </if>


                  <set var="mergedContact['vs360_keywords']">{refCategoriesString}</set>
                  <if condition="exchangeCategoriesString ne refCategoriesString">
                    <set var="crmCategoryChanges">{exchangeCategoriesString}</set>
                    <set var="mergedContact['vs360_keywords']">{exchangeCategoriesString}</set>
                    <set var="refChanges['vs360_keywords']">{exchangeCategoriesString}</set>
                  </if>
                </if>
                <!-- Fill Categories changes (Exchange-To-CRM only) -->


                <set var="logDetail">{logDetail}Merged : {mergedContact}&#xD;&#xA;</set>
                <log if="Settings.ExtendedLog eq '1'">Merged : {mergedContact}</log>


                <!-- Changes for entityimage -->
				<if condition="Settings.ImageSync">
					<set var="mergedContactImageHash" if="!mergedContact['entityimage'].isSet">{mergedContact['entityimage']}</set>
					<set var="mergedContactImageHash" if="mergedContact['entityimage'].isSet">{Utils.ByteArrayToBase64String(instSHA256.ComputeHash(mergedContact['entityimage']))}</set>

					<if condition="crmImageHash != mergedContactImageHash">
					  <set var="crmChanges['entityimage']">{mergedContact['entityimage']}</set>
					</if>
					<if condition="exchImageHash != mergedContactImageHash">
					  <set var="exchChanges['entityimage']">{mergedContact['entityimage']}</set>
					</if>
					<if condition="ref['entityimage'] != mergedContactImageHash">
					  <set var="refChanges['entityimage']">{mergedContactImageHash}</set>
					</if>
					<set var="mergedContact['entityimage']">{mergedContactImageHash}</set>
				</if>
                <!-- Changes for entityimage -->

                <for var="mapping" in="Mapping.ContactMapping">
                  <if condition="currentCrmContact[mapping.Crm] != mergedContact[mapping.Crm]">
                    <set var="crmChanges[mapping.Crm]">{mergedContact[mapping.Crm]}</set>
                  </if>
                  <if condition="currentExchangeContact[mapping.Exchange] != mergedContact[mapping.Crm] and !(mapping.ExchangeToCrmOnly ?? false)">
                    <set var="exchChanges[mapping.Exchange]">{mergedContact[mapping.Crm]}</set>
                  </if>
                  <if condition="ref[mapping.Crm] != mergedContact[mapping.Crm]">
                    <set var="refChanges[mapping.Crm]">{mergedContact[mapping.Crm]}</set>
                  </if>
                </for>


                <if condition="crmChanges.ContainsKey('emailaddress1')">

                  <if condition="crmChanges['emailaddress1'] eq null">
                    <then>
                      <set var="crmChanges['parentcustomerid']">{null}</set>
                      <set var="crmChanges['vs360_companyname']">{null}</set>

                      <set var="refChanges['parentcustomerid']">{null}</set>
                      <set var="refChanges['vs360_companyname']">{null}</set>

                      <set var="mergedContact['parentcustomerid']">{null}</set>
                      <set var="mergedContact['vs360_companyname']">{null}</set>

                      <set var="exchChanges['crmParentAccountId']"></set>
                      <set var="exchChanges['crmParentObjectType']"></set>
                      <set var="exchChanges['ParentAccount']"></set>
                    </then>
                    <else>
                      <set var="refDomain">{Utils.Split(ref['emailaddress1'], '@')[1].ToLower() ?? null}</set>
                      <set var="changedDomain">{Utils.Split(crmChanges['emailaddress1'], '@')[1].ToLower() ?? null}</set>

                      <if condition="refDomain ne changedDomain">
                        <log>        Email domain was changed: '{refDomain}' to '{changedDomain}'. Performing Company search...</log>


                        <set var="CheckEmailDomainResults">{new Object()}</set>
                        <CheckEmailDomain
                          Context="Context"
                          EmailAddress="crmChanges['emailaddress1']"
                          CheckEmailDomainResults="CheckEmailDomainResults" />

                        <if condition="CheckEmailDomainResults.Account.isSet">
                          <then>

                            <if condition="!currentCrmContact['parentcustomerid'].isSet 
															or currentCrmContact['parentcustomerid'].Id ne CheckEmailDomainResults.Account.Id">

                              <log>             Company will be changed to {CheckEmailDomainResults.Account.Id}...</log>

                              <set var="accountRef">account:{CheckEmailDomainResults.Account.Id}</set>

                              <set var="crmChanges['parentcustomerid']">{accountRef}</set>
                              <set var="crmChanges['vs360_companyname']">{CheckEmailDomainResults.Account.Name}</set>

                              <set var="refChanges['parentcustomerid']">{accountRef}</set>
                              <set var="refChanges['vs360_companyname']">{CheckEmailDomainResults.Account.Name}</set>

                              <set var="mergedContact['parentcustomerid']">{accountRef}</set>
                              <set var="mergedContact['vs360_companyname']">{CheckEmailDomainResults.Account.Name}</set>

                              <set var="exchChanges['crmParentAccountId']">{{{CheckEmailDomainResults.Account.Id}}</set>
                              <set var="exchChanges['crmParentObjectType']">{1}</set>
                              <set var="exchChanges['ParentAccount']">{CheckEmailDomainResults.Account.Name}</set>
                            </if>

                          </then>
                          <else>

                            <log>             Associated Company was not found. parentcustomerid will be set to null...</log>

                            <set var="crmChanges['parentcustomerid']">{null}</set>
                            <set var="crmChanges['vs360_companyname']">{null}</set>

                            <set var="refChanges['parentcustomerid']">{null}</set>
                            <set var="refChanges['vs360_companyname']">{null}</set>

                            <set var="mergedContact['parentcustomerid']">{null}</set>
                            <set var="mergedContact['vs360_companyname']">{null}</set>

                            <set var="exchChanges['crmParentAccountId']"></set>
                            <set var="exchChanges['crmParentObjectType']"></set>
                            <set var="exchChanges['ParentAccount']"></set>
                          </else>
                        </if>
                      </if>
                    </else>
                  </if>

                </if>


                <set var="logDetail">{logDetail}CRM changes: {crmChanges}&#xD;&#xA;</set>
                <set var="logDetail">{logDetail}Exchange changes: {exchChanges}&#xD;&#xA;</set>
                <set var="logDetail">{logDetail}Ref changes: {refChanges}&#xD;&#xA;</set>

                <if condition="exchChanges.Count gt 0 or crmChanges.Count gt 0 or refChanges.Count gt 0">
                  <log if="Settings.ExtendedLog eq '0'">{logDetail}</log>
                </if>

                <log if="Settings.ExtendedLog eq '1'">CRM changes: {crmChanges}</log>
                <log if="Settings.ExtendedLog eq '1'">Exchange changes: {exchChanges}</log>
                <log if="Settings.ExtendedLog eq '1'">Ref changes: {refChanges}</log>

                <if condition="crmChanges.Count gt 0">
                  <log>Updating contact in Crm</log>

                  <set var="addressModeChangeRequired">{false}</set>
                  <for var="mapping" in="Mapping.ContactMapping">
                    <if condition="crmChanges.ContainsKey(mapping.Crm) and mapping.IsAddressModeHandler.isSet and mapping.IsAddressModeHandler == 'yes'">
                      <!--For Company Address only-->
                      <if condition="currentCrmContact.vs360_addresstype.isSet and currentCrmContact.vs360_addresstype == 360000001">
                        <set var="addressModeChangeRequired">{true}</set>
                      </if>
                    </if>
                  </for>

                  <update in="crm" entity="contact">
                    <where>
                      <condition attr="contactid" op="eq">{currentCrmContact.contactid}</condition>
                    </where>

                    <for var="mapping" in="Mapping.ContactMapping">
                      <if condition="crmChanges.ContainsKey(mapping.Crm)">
                        <set mappingValue="crmChanges[mapping.Crm]"/>
                        <attr name="{mapping.Crm}">{mappingValue}</attr>
                      </if>
                    </for>

                    <attr name="parentcustomerid" if="crmChanges.ContainsKey('parentcustomerid')">{crmChanges['parentcustomerid']}</attr>
                    <attr name="entityimage" if="crmChanges.ContainsKey('entityimage')">{crmChanges['entityimage']}</attr>

                    <attr name="vs360_modifiedbyemployeeid">vs360_employee:{Employee.Id}</attr>
                    <if condition="addressModeChangeRequired">
                      <attr name="vs360_companyaddressidname">{null}</attr>
                      <attr name="vs360_companyaddressid">{null}</attr>
                      <attr name="vs360_addresstype">{360000000}</attr>
                    </if>
                  </update>
                </if>

                <if condition="crmCategoryChanges.isSet">
                  <log>Updating contact Categories in Crm...</log>
                  <update in="crm" entity="vs360_relationship">
                    <where>
                      <condition attr="vs360_employeeid"	op="eq">{Employee.Id}</condition>
                      <condition attr="vs360_contactid" 	op="eq">{currentCrmContact.contactid}</condition>
                      <condition attr="statecode" 		op="eq">{0}</condition>
                    </where>
                    <attr name="vs360_keywords">{crmCategoryChanges}</attr>
                  </update>
                </if>


                <if condition="exchChanges.Count gt 0 or crmChanges.Count gt 0 or refChanges.Count gt 0">
                  <log>Updating contact in Exchange</log>
                  <update in="exchange" entity="contact">
                    <where>
					  <if condition="Settings.SyncMainFolderOnly eq false">
						<condition attr="@FolderName" op="eq">root/allitems</condition>
					  </if>
                      <condition attr="EntryId" op="eq">{currentExchangeContact.EntryId}</condition>
                    </where>

                    <for var="mapping" in="Mapping.ContactMapping">
                      <if condition="exchChanges.ContainsKey(mapping.Exchange) and !mapping.Multiline.isSet">
                        <set mappingValue="exchChanges[mapping.Exchange]"/>
                        <attr name="{mapping.Exchange}" if="mapping.Type eq 'DateTime' and mapping.ExchangeType eq 'DateTime' and mappingValue.isSet">{Utils.DateToString(mappingValue, 'yyyy-MM-ddTHH:mm:ssZ')}</attr>
                        <attr name="{mapping.Exchange}" if="mapping.Type eq 'DateTime' and mapping.ExchangeType eq 'DateTime' and !mappingValue.isSet">{null}</attr>
                        <attr name="{mapping.Exchange}" if="mapping.Type eq 'String' and mapping.ExchangeType eq 'String'">{mappingValue}</attr>
                        <attr name="{mapping.Exchange}" if="mapping.Type eq 'String' and mapping.ExchangeType eq 'Array' and mappingValue.isSet">{Utils.SplitIntoUniqueList(mappingValue.Replace(";", ","), ",")}</attr>
                        <attr name="{mapping.Exchange}" if="mapping.Type eq 'String' and mapping.ExchangeType eq 'Array' and (!mappingValue.isSet or mappingValue eq '')">{null}</attr>
                      </if>
                    </for>

                    <for var="mapping" in="Mapping.ContactMultiLineMapping">
                      <set var="needToUpdate">{false}</set>
                      <set var="values">{new List()}</set>
                      <for var="crmField" in="mapping.Crm">
                        <set var="needToUpdate" if="exchChanges.ContainsKey(crmField)">{true}</set>
                        <set var="values[]">{mergedContact[crmField] ?? ''}</set>
                      </for>
                      <set var="resultValue">{Utils.Join(values, '&#xD;&#xA;').Trim()}</set>
                      <attr name="{mapping.Exchange}" if="needToUpdate">{resultValue}</attr>
                      <attr name="mailingaddressstreet">{resultValue}</attr>
                    </for>

                    <attr name="crmxml_vs360">{Xml.ToXml(mergedContact, "contact")}</attr>

                    <!-- <attr name="crmLinkState">{2}</attr> -->
					<attr name="crmLinkState_vs360">{2}</attr>
                    <attr name="iconindex">{514}</attr>

                    <set var="fileas">{Settings.ExchangeFileAs.Replace('firstname', mergedContact['firstname']??'')}</set>
                    <set var="fileas">{fileas.Replace('lastname', mergedContact['lastname']??'')}</set>

                    <if condition="exchChanges.ContainsKey('firstname') or exchChanges.ContainsKey('lastname')">
                      <attr name="fileas">{fileas}</attr>
                    </if>

                    <if condition="exchChanges.ContainsKey('crmParentAccountId')">
                      <attr name="crmParentAccountId">{exchChanges['crmParentAccountId']}</attr>
                      <attr name="crmParentObjectType">{exchChanges['crmParentObjectType']}</attr>
                      <attr name="ParentAccount">{exchChanges['ParentAccount']}</attr>
                      <attr name="companyname">{exchChanges['ParentAccount']}</attr>
                    </if>
                    <if condition="exchChanges.ContainsKey('birthday')">
                      <attr name="birthdaylocal" if="exchChanges['birthday'].isSet">{Utils.DateToString(exchChanges['birthday'], 'yyyy-MM-ddTHH:mm:ssZ')}</attr>
                      <attr name="birthdaylocal" if="!exchChanges['birthday'].isSet">{null}</attr>
                    </if>

                    <if condition="exchChanges.ContainsKey('weddinganniversary')">
                      <attr name="weddinganniversarylocal" if="exchChanges['weddinganniversary'].isSet">{Utils.DateToString(exchChanges['weddinganniversary'], 'yyyy-MM-ddTHH:mm:ssZ')}</attr>
                      <attr name="weddinganniversarylocal" if="!exchChanges['weddinganniversary'].isSet">{null}</attr>
                    </if>
                    <for var="i" in="[1,2,3]">
                      <if condition="exchChanges.ContainsKey('email'+i+'address')">
                        <attr name="email{i}displayname">{exchChanges['email'+i+'address']}</attr>
                        <attr name="email{i}displayname" if="exchChanges['email'+i+'address'] eq ''"/>
                      </if>
                      <if condition="exchChanges.ContainsKey('email'+i+'address') or exchChanges.ContainsKey('firstname') or exchChanges.ContainsKey('lastname')">
                        <attr name="email{i}fullname">{fileas} ({mergedContact['emailaddress'+i]})</attr>
                        <attr name="email{i}fullname" if="mergedContact['emailaddress'+i] eq ''"/>
                      </if>
                    </for>

                    <for var="field" in="['state', 'postofficebox', 'postalcode', 'country', 'city']">
                      <for var="prefix" in="['work', 'home', 'other']">
                        <if condition="exchChanges.ContainsKey(prefix+'address'+field)">
                          <attr name="mailingaddress{field}">{exchChanges[prefix+'address'+field]}</attr>
                        </if>
                      </for>
                    </for>
                  </update>

                  <if condition="exchChanges.ContainsKey('entityimage')">
                    <log>Updating Attachments in Exchange</log>

                    <if condition="exchImageId ne null">
                      <set var="deleteList">{new List()}</set>
                      <set var="deleteList[]">{exchImageId}</set>
                      <set>{@exchange.DeleteAttachments(deleteList)}</set>
                    </if>

                    <if condition="exchChanges['entityimage'] ne null">
                      <set var="fileList">{new List()}</set>

                      <set var="fileAtt">
                        <attr name="IsContactPhoto">{true}</attr>
                        <attr name="IsContactPhotoSpecified">{true}</attr>
                        <attr name="Name">ContactPicture.jpg</attr>
                        <attr name="Content">{exchChanges['entityimage']}</attr>
                      </set>
                      <set var="fileList[]">{fileAtt}</set>

                      <set>{@exchange.CreateAttachments(currentExchangeContact.itemid, fileList)}</set>
                    </if>
                  </if>
                </if>

              </if>
            </sandbox>

          </for>


        </context>
      </context>

      <log>Stamping the LastSyncTime {currentSyncDate}</log>
      <update in="crm" entity="vs360_employee">
        <where>
          <condition attr="vs360_employeeid" op="eq">{Employee.Id}</condition>
        </where>
        <attr name="vs360_lastcontactssyncdate">{currentSyncDate}</attr>
      </update>
      <set var="Employee.LastSyncDate">{currentSyncDate}</set>
      <onerror var="ex">
        <log if="Settings.ExtendedLog eq '0'">{logDetail}</log>
        <log>Synchronization Failed: {ex}</log>
      </onerror>
    </sandbox>
  </if>
</script>