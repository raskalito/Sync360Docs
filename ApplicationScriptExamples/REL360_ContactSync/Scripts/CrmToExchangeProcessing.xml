<script>
	<!--              CONFIGURATION SECTION                   -->
	<set var="ManualMode">{false}</set> <!--USE FOR DEVELOPMENT/MANUAL DEBUG-->
	<if condition="!Context.isSet">
        <var Employee='["EmployeeId" : (Input.ObjectId ?? "a563aa50-48ac-ec11-983f-0022480ace83")]'/>
        <!--<var Employee='["EmployeeId" : (Input.ObjectId ?? "58441ca8-9550-ee11-be6f-000d3a34ec2a")]'/>-->
		<var Employee='["EmployeeId" : (Input.ObjectId ?? "d6f4805e-06aa-ec11-983f-0022480ace83")]'/> <!--att1-->
		<include name="InitializeContext" />
    </if>
	<!--              CONFIGURATION END                       -->
	
	
	<exception if="!Context.isSet">Context parameter is required.</exception>
	<set var="Employee">{Context.Employee}</set>
	
	<log></log>
	<log>Create new contacts in Exchange from Crm for Employee {Employee.Email} ({Employee.Id}) started.</log>
	<log></log>

	<sandbox>
	
	
	<set var="Mapping">{Context.Mapping}</set>
	<set var="Settings">{Context.Settings}</set>
	<set var="PrivateFields">{Context.PrivateFields}</set>
	
	
	<log if="!Settings.ContactSyncEnabled">Contacts Sync is Disabled in Settings.</log>
	<log if="!Settings.DeployedApps.ContactSync">ContactSync is not active in DeployedApps setting.</log>
	
	<if condition="Settings.DeployedApps.Onboarding">
		<log if="Settings.OnboardingRequestedSyncStop">Contacts Sync is Disabled by Onboarding.</log>
		<log if="!Employee.IsRolloutCompleted">Employee is waiting for Onboarding.</log>
	</if>
	
	<set var="IsRunAllowed">{
		Settings.ContactSyncEnabled 
		and (Settings.DeployedApps.Onboarding ? (Employee.IsRolloutCompleted and !Settings.OnboardingRequestedSyncStop) : true)  
		and Settings.DeployedApps.ContactSync}</set>
	
	<set var="IsRunAllowed" if="ManualMode">{true}</set>
	<if condition="IsRunAllowed">
	
		<context for="exchange" user="{Employee.Email}">
			
			<!--READING RELATIONSHIPS WITH CONTACTS-->
			<context for="crm" user="{Employee.UserId}">
			<select from="crm" entity="contact" var="crmContacts">
				<where>
					<condition attr="statecode" op="eq">{0}</condition>
				</where>
				<join type="inner" entity="vs360_relationship" to="contactid" from="vs360_contactid">
					<where>
						<condition attr="vs360_deletedinoutlook" op="null"/>
						<condition attr="vs360_syncwithoutlook" op="eq">{true}</condition>
						<condition attr="vs360_employeeid" op="eq">{Employee.Id}</condition>
						<condition attr="statecode" op="eq">{0}</condition>
						<condition attr="vs360_contactid" op="ex" />
					</where>
					<attr name="vs360_relationshipid" as="vs360_relationshipid"/>
				</join>
				
				<for var="mapping" in="Mapping.ContactMapping">
					<attr name="{mapping.Crm}" as="{mapping.Crm}"/>
				</for>
				
				<attr name="fullname" />
				<attr name="firstname" />
				<attr name="lastname" />
				<attr name="emailaddress1" />
				<attr name="mobilephone" />
				<attr name="telephone1" />
				<attr name="contactid" />
				<attr name="parentcustomerid"/>
				
				<if condition="Settings.ImageSync">
                    <attr name="entityimage"/>
                </if>
			</select>
			</context>

			<log>{crmContacts.Count} new Employee Relationships found in crm</log>

			<for var="crmContact" in="crmContacts">
				<set var="exchangeContacts">{new List()}</set>
				<set var="crmIdString">{crmContact.contactid.ToString()}</set>
				
				<select from="exchange" entity="contact" var="exchangeContacts">
					<where>
						<if condition="Settings.SyncMainFolderOnly eq false">
							<condition attr="parententryid" op="ne">deleteditems</condition>
							<condition attr="@FolderName" op="eq">root/allitems</condition>
							<if condition="Settings.OutlookFolder.isSet and Settings.OutlookFolder ne ''">
								<condition attr="parententryid" op="ne">{Settings.OutlookFolder}</condition>
							</if>
						</if>
						<condition attr="crmid" op="co">{crmIdString}</condition>
					</where>

					<attr name="crmid"/>
				</select>
				<!--if there is a contact with current crm id-->
				<if condition="exchangeContacts.isSet and exchangeContacts.Count gt 0">
					<log>Contact was already created by server-side sync. Updating relationship record</log>
					<context for="crm" user="{Employee.UserId}">
						<update in="crm" entity="vs360_relationship">
							<where>
								<condition attr="vs360_relationshipid" op="eq">{crmContact.vs360_relationshipid}</condition>
							</where>
							<attr name="vs360_deletedinoutlook">{0}</attr>
							<attr name="vs360_syncwithoutlook">{true}</attr>
						</update>
					</context>
					<continue />
				</if>
				<!--if there are no contacts with current crm id-->
				<if condition="exchangeContacts.isSet and exchangeContacts.Count eq 0">
                    <log>Searching for exchange duplicates</log>
					
					<set var="lastnameAndEmailIsSet">{crmContact.lastname.isSet and crmContact.lastname.Length gt 0 and crmContact.emailaddress1.isSet and crmContact.emailaddress1.Length gt 0}</set>
					<set var="mobilephoneIsSet">{crmContact.lastname.isSet and crmContact.lastname.Length gt 0 and crmContact.mobilephone.isSet and crmContact.mobilephone.Length gt 0}</set>
					<set var="businessphoneIsSet">{crmContact.firstname.isSet and crmContact.firstname.Length gt 0 and crmContact.lastname.isSet and crmContact.lastname.Length gt 0 and crmContact.telephone1.isSet and crmContact.telephone1.Length gt 0}</set>
					
					<if condition="lastnameAndEmailIsSet or mobilephoneIsSet or businessphoneIsSet">
						
						<select from="exchange" entity="contact" var="exchangeContacts">
							<where>
								<if condition="Settings.SyncMainFolderOnly eq false">
									<condition attr="parententryid" op="ne">deleteditems</condition>
									<condition attr="@FolderName" op="eq">root/allitems</condition>
									<if condition="Settings.OutlookFolder.isSet and Settings.OutlookFolder ne ''">
										<condition attr="parententryid" op="ne">{Settings.OutlookFolder}</condition>
									</if>
								</if>
								<condition attr="lastname" op="eq" >{crmContact['lastname']}</condition>
								<or>
									<condition attr="email1address" op="eq" if="lastnameAndEmailIsSet">{crmContact['emailaddress1']}</condition>
									<condition attr="mobilephone" op="eq" if="mobilephoneIsSet">{crmContact['mobilephone']}</condition>
									<if condition="businessphoneIsSet">
										<and>
											<condition attr="firstname" op="eq">{crmContact['firstname']}</condition>
											<condition attr="workphone" op="eq">{crmContact['telephone1']}</condition>
										</and>
									</if>
								</or>
								<or>
									<condition attr="crmid" op="eq"></condition>
									<not><condition attr="crmid" op="ex"></condition></not>
								</or>
								<for var="mapping" in="Mapping.ContactMapping">
									<attr name="{mapping.Exchange}" unless="mapping.Multiline.isSet" />
								</for>
								<for var="mapping" in="Mapping.ContactMultiLineMapping">
									<attr name="{mapping.Exchange}"/>
								</for>
								<attr name="EntryId"/>
								<attr name="companyname"/>
								<attr name="lastmodifieddate"/>
								<attr name="lastcommitdate"/>
								<attr name="email1displayname"/>
								<attr name="hasattachments"/>
								<attr name="attachments"/>
								<attr name="itemid"/>
								<attr name="sensitivity"/>
								<attr name="Keywords"/>
							</where>
						</select>  
					</if>
                </if>
				<!--If no duplicates in exchange-->
				<if condition="exchangeContacts.isSet and exchangeContacts.Count eq 0">
					<log>Creating contact {crmContact.fullname} in exchange</log>
					
					<set var="crmFields">{new Dictionary()}</set>
					<for var="mapping" in="Mapping.ContactMapping">
						<set var="crmFields[mapping.Crm]">{crmContact[mapping.Crm]}</set>
					</for>

					<create in="exchange" entity="contact" var="newExchangeContact">
						
						<for var="mapping" in="Mapping.ContactMapping">
							<if condition="crmFields.ContainsKey(mapping.Crm) and !mapping.Multiline.isSet and crmFields[mapping.Crm].isSet and !(mapping.ExchangeToCrmOnly ?? false)">
								<set mappingValue="crmFields[mapping.Crm]"/>
								<attr name="{mapping.Exchange}" if="mapping.Type eq 'DateTime' and mapping.ExchangeType eq 'DateTime'">{Utils.DateToString(mappingValue, 'yyyy-MM-ddTHH:mm:ssZ')}</attr>
								<attr name="{mapping.Exchange}" if="mapping.Type eq 'String' and mapping.ExchangeType eq 'String'">{mappingValue}</attr>
								<attr name="{mapping.Exchange}" if="mapping.Type eq 'String' and mapping.ExchangeType eq 'Array'">{Utils.SplitIntoUniqueList(mappingValue.Replace(";", ","), ",")}</attr>
							</if>
						</for>

						<for var="mapping" in="Mapping.ContactMultiLineMapping">
							<continue if="mapping.Exchange ne 'workaddressstreet'" />
							
							<set var="needToUpdate">{false}</set>
							<set var="values">{new List()}</set>
							<for var="crmField" in="mapping.Crm">
								<set var="needToUpdate" if="crmFields.ContainsKey(crmField)">{true}</set>
								<set var="values[]">{crmFields[crmField] ?? ''}</set>
							</for>
							<set var="resultValue">{Utils.Join(values, '&#xD;&#xA;').Trim()}</set>
							<attr name="{mapping.Exchange}" if="needToUpdate">{resultValue}</attr>
							<attr name="mailingaddressstreet">{resultValue}</attr>
						</for>

						<set var="fileas">{Settings.ExchangeFileAs.Replace('firstname', crmContact.firstname ?? '').Replace('lastname', crmContact.lastname ?? '')}</set>

						<for var="i" in="[1,2,3]">
							<if condition="crmFields['emailaddress'+i].isSet">
								<attr name="email{i}displayname">{crmFields['emailaddress'+i]}</attr>
								<attr name="email{i}displayname" if="crmFields['emailaddress'+i] eq ''"></attr>
							</if>
							<if condition="crmFields['emailaddress'+i].isSet">
								<attr name="email{i}fullname">{fileas} ({crmFields['emailaddress'+i]})</attr>
								<attr name="email{i}fullname" if="crmFields['emailaddress'+i] eq ''"></attr>
							</if>
						</for>

						<if condition="crmContact['parentcustomerid'].isSet">
							<set var="lookupValue">{crmContact['parentcustomerid']}</set>
							<attr name="crmParentObjectType">1</attr>
							<attr name="crmParentObjectType" if="lookupValue.LogicalName eq 'contact'">2</attr>
							<attr name="crmParentAccountId">{{{lookupValue.Id}}</attr>
							<attr name="ParentAccount">{lookupValue.Name}</attr>
							<set var="crmFields['parentcustomerid']">{lookupValue.LogicalName}:{lookupValue.Id}</set>
						</if>

						<attr name="crmxml_vs360">{Xml.ToXml(crmFields, "contact")}</attr>
						<attr name="crmcreatedfrom">crm</attr>
						<attr name="crmid">{crmContact.contactid.ToString()}</attr>
						<!-- <attr name="crmLinkState">{2}</attr> -->
						<attr name="crmLinkState_vs360">{2}</attr>
						<attr name="iconindex">{514}</attr>
						<attr name="fileas">{fileas}</attr>
						<attr name="mailingaddressid">{2}</attr>

						<if condition="crmFields.ContainsKey('birthdate') and crmFields['birthdate'].isSet">
							<attr name="birthdaylocal">{Utils.DateToString(crmFields['birthdate'], 'yyyy-MM-ddTHH:mm:ssZ')}</attr>
						</if>
						<if condition="crmFields.ContainsKey('anniversary') and crmFields['anniversary'].isSet">
							<attr name="weddinganniversarylocal">{Utils.DateToString(crmFields['anniversary'], 'yyyy-MM-ddTHH:mm:ssZ')}</attr>
						</if>
					</create>
					
					<if condition="Settings.ImageSync">
						<if condition="crmContact['entityimage'].isSet">
						
							<set var="SHA256">{static "System.Security.Cryptography.SHA256"}</set>
							<set var="instSHA256">{SHA256.Create()}</set>
							<set var="crmImageHash">{Utils.ByteArrayToBase64String(instSHA256.ComputeHash(crmContact.entityimage))}</set>
							<set var="crmFields['entityimage']">{crmImageHash}</set>
						
							<log>Adding attachment in Exchange: {newExchangeContact}</log>
							<select from="exchange" entity="contact" var="exContacts" count="1">
								<where>
									<if condition="Settings.SyncMainFolderOnly eq false">
										<condition attr="parententryid" op="ne">deleteditems</condition>
										<condition attr="@FolderName" op="eq">root/allitems</condition>
										<if condition="Settings.OutlookFolder.isSet and Settings.OutlookFolder ne ''">
											<condition attr="parententryid" op="ne">{Settings.OutlookFolder}</condition>
										</if>
									</if>
									<condition attr="EntryId" op="eq">{newExchangeContact}</condition>
								</where>
								<attr name="itemid"/>
							</select>
							
							<set var="fileList">{new List()}</set>
							
							<set var="fileAtt">
								<attr name="IsContactPhoto">{true}</attr>
								<attr name="IsContactPhotoSpecified">{true}</attr>
								<attr name="Name">ContactPicture.jpg</attr>
								<attr name="Content">{crmContact.entityimage}</attr>
							</set>
							<set var="fileList[]">{fileAtt}</set>
							
							<set>{@exchange.CreateAttachments(exContacts[0].itemid, fileList)}</set>
						</if>
					</if>
					
					
					<log>Contact created in Exchange: {newExchangeContact}. Updating relationship record</log>
					<context for="crm" user="{Employee.UserId}">
						<update in="crm" entity="vs360_relationship">
							<where>
								<condition attr="vs360_relationshipid" op="eq">{crmContact.vs360_relationshipid}</condition>
							</where>
							<attr name="vs360_deletedinoutlook">{0}</attr>
							<attr name="vs360_syncwithoutlook">{true}</attr>
						</update>
					</context>
				</if>
				<!--If duplicates found-->
				<if condition="exchangeContacts.isSet and exchangeContacts.Count gt 0">
				    <set var="exDupContact">{null}</set>
					
					<log>{exchangeContacts.Count} contacts was found in Exchange.</log>
					
					<if condition="lastnameAndEmailIsSet">
						<for var="dupContact" in="exchangeContacts">
							<if condition="(dupContact.email1address.ToLower() eq crmContact.emailaddress1.ToLower()) ?? false"> 
								<set var="isPrivate">{false}</set>
								<if condition="dupContact.sensitivity.isSet and dupContact.sensitivity eq '2'">
									<set var="isPrivate">{true}</set>
									<log>Exchange contact {dupContact.EntryId} is private (sensitivity)</log>
                                </if>
								
								<set var="exKeywords">{new List(dupContact.Keywords ?? (new List()))}</set>
								<if condition="exKeywords.Count gt 0 and isPrivate eq false">
                                    <for var="optOutCategory" in="Settings.OptOutCategories">
                                        <if condition="exKeywords.Contains(optOutCategory)">
                                            <set var="isPrivate">{true}</set>
											<log>Exchange contact {dupContact.EntryId} is private (Category '{optOutCategory}')</log>
											<break />
                                        </if>
                                    </for>
                                </if>
								
								<if condition="!isPrivate">
                                    <set var="exDupContact" if="!isPrivate">{dupContact}</set>
									<break />
                                </if>
							</if>
						</for>
					</if>

					<if condition="mobilephoneIsSet and !exDupContact.isSet">
						<for var="dupContact" in="exchangeContacts">
							<if condition="(dupContact.mobilephone eq crmContact.mobilephone) ?? false">
								<set var="isPrivate">{false}</set>
								<if condition="dupContact.sensitivity.isSet and dupContact.sensitivity eq '2'">
									<set var="isPrivate">{true}</set>
									<log>Exchange contact {dupContact.EntryId} is private (sensitivity)</log>
                                </if>
								
								<set var="exKeywords">{new List(dupContact.Keywords ?? (new List()))}</set>
								<if condition="exKeywords.Count gt 0 and isPrivate eq false">
                                    <for var="optOutCategory" in="Settings.OptOutCategories">
                                        <if condition="exKeywords.Contains(optOutCategory)">
                                            <set var="isPrivate">{true}</set>
											<log>Exchange contact {dupContact.EntryId} is private (Category '{optOutCategory}')</log>
											<break />
                                        </if>
                                    </for>
                                </if>
								
								<if condition="!isPrivate">
                                    <set var="exDupContact" if="!isPrivate">{dupContact}</set>
									<break />
                                </if>
							</if>
						</for>
					</if>

					<if condition="businessphoneIsSet and !exDupContact.isSet">
						<for var="dupContact" in="exchangeContacts">
							<if condition="(dupContact.workphone eq crmContact.telephone1
											and dupContact.firstname.ToLower() eq crmContact.firstname.ToLower()) ?? false">
								<set var="isPrivate">{false}</set>
								<if condition="dupContact.sensitivity.isSet and dupContact.sensitivity eq '2'">
									<set var="isPrivate">{true}</set>
									<log>Exchange contact {dupContact.EntryId} is private (sensitivity)</log>
                                </if>
								
								<set var="exKeywords">{new List(dupContact.Keywords ?? (new List()))}</set>
								<if condition="exKeywords.Count gt 0 and isPrivate eq false">
                                    <for var="optOutCategory" in="Settings.OptOutCategories">
                                        <if condition="exKeywords.Contains(optOutCategory)">
                                            <set var="isPrivate">{true}</set>
											<log>Exchange contact {dupContact.EntryId} is private (Category '{optOutCategory}')</log>
											<break />
                                        </if>
                                    </for>
                                </if>
								
								<if condition="!isPrivate">
                                    <set var="exDupContact" if="!isPrivate">{dupContact}</set>
									<break />
                                </if>
							</if>
						</for>
					</if>
					
					<!--IF  dupContact eq null that means all found contacts were PRIVATE-->
					<if condition="exDupContact eq null">
						<log>No public duplicates found in Exchange.</log>
						
						<if condition="Settings.CRMPrivateAction.ToLower() eq 'delete'">
                            <log>Deleting relationship record...</log>
							<delete in="crm" entity="vs360_relationship">
                                <where>
                                    <condition attr="vs360_relationshipid" op="eq">{crmContact.vs360_relationshipid}</condition>
                                </where>
                            </delete>
                        </if>
						
						<if condition="Settings.CRMPrivateAction.ToLower() eq 'deactivate'">
                            <log>Deactivating relationship record...</log>
							<update in="crm" entity="vs360_relationship">
                                <where>
                                    <condition attr="vs360_relationshipid" op="eq">{crmContact.vs360_relationshipid}</condition>
                                </where>
								<attr name="vs360_deletedinoutlook">{3}</attr>
								<attr name="vs360_syncwithoutlook">{false}</attr>
								<attr name="statecode">{1}</attr>
                            </update>
                        </if>
                    </if>
					
					<if condition="exDupContact ne null">
					
						<NormalizeExchangeContact Contact="exDupContact"/>
						<set var="exDupContact['crmid']">{Utils.NewGuid}</set>
							

						<set var="excontact">{exDupContact}</set>  
						
						<log>Exchange contact : {excontact.lastname ?? ''}, {excontact.firstname ?? ''}</log>

						<for var="mapping" in="Mapping.ContactMapping">
							<set var="excontact[mapping.Exchange]" if="mapping.ExchangeType eq 'String' and excontact[mapping.Exchange].isSet">{excontact[mapping.Exchange].Trim()}</set>
						</for>
						<for var="mapping" in="Mapping.ContactMultiLineMapping">
							<set var="cleanValue">{excontact[mapping.Exchange].Replace("&#xD;&#xA;", "&#xA;").Replace("&#xD;", "&#xA;") ?? null}</set>
							<set var="values">{Utils.Split(cleanValue, "&#xA;")}</set>
							<set var="counter">{0}</set>
							<for var="crmField" in="mapping.Crm">
								<set var="value"></set>
								<set var="value" if="counter lt values.Length and values[counter] ne '' ">{values[counter]}</set>
								<set var="excontact[crmField]">{value.Trim()}</set>
								<set var="counter">{counter+1}</set>
							</for>
						</for>
						
						<!-- Multi-line mapping convert -->
						<set var="additionalCrmValues">{new List()}</set>
						<for var="mapping" in="Mapping.ContactMultiLineMapping">
							<set var="cleanValue">{excontact[mapping.Exchange].Replace("&#xD;&#xA;", "&#xA;").Replace("&#xD;", "&#xA;") ?? null}</set>
							<set var="values">{Utils.Split(cleanValue, "&#xA;")}</set>
							<set var="counter">{0}</set>
							<for var="value" in="values">
								<if condition="value!=''">
									<if condition="counter ne mapping.Crm.Count">
										<set var="additionalCrmValues[]">
											<attr name="Name">{mapping.Crm[counter]}</attr>
											<attr name="Value">{value}</attr>
										</set>
										<set var="counter">{counter+1}</set>
									</if>
								</if>
							</for>
						</for>
						
						<CreateBackupDataRecord
							ExContact="excontact"
							CrmContactId="crmContact.contactid"
							EmployeeId="Employee.Id"
							Mapping="Mapping"
							AdditionalCrmValues="additionalCrmValues" />
						
						<!-- Populate CRM contact empty fields with data from Exchange -->
						<var CallObject='new Object()'/>
						<set var="CallObject.Contactid">{crmContact.contactid}</set>
						<set var="CallObject.Mapping">{Mapping}</set>
						<set var="CallObject.ExContact">{excontact}</set>
						<set var="CallObject.PrivateFields">{PrivateFields}</set>
						<set var="CallObject.Settings">{Settings}</set>
						<set var="CallObject.Employee">{Employee}</set>
						<set var="CallObject.AssociatedAccount">{null}</set>
						<call name="FillCRMContactEmptyFieldsWithDataFromExchange" CallObject="CallObject"/>
						
						<if condition="Settings.OneWaySync eq '0' and Settings.ConflictingDataPriority eq 'crm'">
							<!-- Update the Outlook Contact if CRM contact and Outlook Contact have conflicting data -->
							<var CallObject='new Object()'/>
							<set var="CallObject.Contactid">{crmContact.contactid}</set>
							<set var="CallObject.Mapping">{Mapping}</set>
							<set var="CallObject.ExContact">{excontact}</set>
							<set var="CallObject.Settings">{Settings}</set>
							<set var="CallObject.Employee">{Employee}</set>
							<call name="UpdateExchangeContactConflictingData" CallObject="CallObject"/>
						</if>
						
						<if condition="(Settings.OneWaySync eq '0' and Settings.ConflictingDataPriority eq 'exchange')">
							<!-- Update the Outlook Contact if CRM contact and Outlook Contact have conflicting data -->
							<var CallObject='new Object()'/>
							<set var="CallObject.Contactid">{crmContact.contactid}</set>
							<set var="CallObject.Mapping">{Mapping}</set>
							<set var="CallObject.ExContact">{excontact}</set>
							<set var="CallObject.Employee">{Employee}</set>
							<set var="CallObject.Settings">{Settings}</set>
							<set var="CallObject.PrivateFields">{PrivateFields}</set><!--Question-->
							<set var="CallObject.IsOnboarding">{false}</set>
							<set var="CallObject.AssociatedAccount">{null}</set><!--Question-->
							<call name="UpdateCrmContactConflictingData" CallObject="CallObject"/>
						</if>
						
						<!-- Select Exchange Contact Data after Fields Merge -->
						<select from="exchange" entity="contact" var="fullExchangeContact">
							<where>
								<if condition="Settings.SyncMainFolderOnly eq false">
									<condition attr="parententryid" op="ne">deleteditems</condition>
									<condition attr="@FolderName" op="eq">root/allitems</condition>
									<if condition="Settings.OutlookFolder.isSet and Settings.OutlookFolder ne ''">
										<condition attr="parententryid" op="ne">{Settings.OutlookFolder}</condition>
									</if>
								</if>
								<condition attr="@BodyResponseType" op="eq">Text</condition>
								<condition attr="EntryId" op="eq">{excontact.EntryId}</condition>
							</where>
							<for var="mapping" in="Mapping.ContactMapping">
								<attr name="{mapping.Exchange}" unless="mapping.Multiline.isSet" />
							</for>
							<for var="mapping" in="Mapping.ContactMultiLineMapping">
								<attr name="{mapping.Exchange}"/>
							</for>
							<attr name="EntryId"/>
							<attr name="companyname"/>
							<attr name="lastmodifieddate"/>
							<attr name="lastcommitdate"/>
							<attr name="email1displayname"/>
							<attr name="email2address"/>
							<attr name="email2displayname"/>
							<attr name="email3address"/>
							<attr name="email3displayname"/>
							<attr name="hasattachments"/>
							<attr name="attachments"/>
						</select>
						
						<set var="excontact">{fullExchangeContact[0]}</set>

						<if condition="excontact.email1address.isSet and excontact.email1address ne ''">

							<set ValidationResult="new Object()" ValidationResult.isInvalid="false" />
							<ProcessX500Emailaddress exContact="excontact" Output="ValidationResult" />

							<set var="CheckEmailDomainResults">{new Object()}</set>
							<CheckEmailDomain
							  Context="Context"
							  EmailAddress="excontact.email1address"
							  CheckEmailDomainResults="CheckEmailDomainResults" />

							<if condition="CheckEmailDomainResults.Account.isSet">
							  <update in="crm" entity="contact">
								<where>
								  <condition attr="contactid" op="eq">{crmContact.contactid}</condition>
								</where>
								<attr name="parentcustomerid">account:{CheckEmailDomainResults.Account.Id}</attr>
								<attr name="vs360_companyname" if="CheckEmailDomainResults.Account.Name.isSet">account:{CheckEmailDomainResults.Account.Name}</attr>
							  </update>
							</if>

						</if>

						<set var="exContactData">{new Dictionary()}</set>

						<for var="mapping" in="Mapping.ContactMapping">
							<if condition="excontact[mapping.Exchange].isSet">
								<set mappingValue="excontact[mapping.Exchange]"/>
								<set var="exContactData[mapping.Crm]" if="mapping.Type eq 'String' and mapping.ExchangeType eq 'String'">{mappingValue.Replace("&#xD;&#xA;", "&#xA;").Replace("&#xA;", "&#xD;&#xA;").TrimEnd()}</set>
								<set var="exContactData[mapping.Crm]" if="mapping.Type eq 'String' and mapping.ExchangeType eq 'Array'">{Utils.Join(mappingValue, ', ')}</set>
								<set var="exContactData[mapping.Crm]" if="mapping.Type eq 'DateTime' and mapping.ExchangeType eq 'DateTime'">{Utils.StringToDate(mappingValue, "yyyy-MM-dd'T'HH:mm:ss'Z'")}</set>
							</if>
						</for>
						
						<!-- Multi-line mapping convert -->
						<set var="additionalCrmValues">{new List()}</set>
						<for var="mapping" in="Mapping.ContactMultiLineMapping">
							<set var="cleanValue">{excontact[mapping.Exchange].Replace("&#xD;&#xA;", "&#xA;").Replace("&#xD;", "&#xA;") ?? null}</set>
							<set var="values">{Utils.Split(cleanValue, "&#xA;")}</set>
							<set var="counter">{0}</set>
							<for var="value" in="values">
								<if condition="value!=''">
									<if condition="counter ne mapping.Crm.Count">
										<set var="additionalCrmValues[]">
											<attr name="Name">{mapping.Crm[counter]}</attr>
											<attr name="Value">{value}</attr>
										</set>
										<set var="counter">{counter+1}</set>
									</if>
								</if>
							</for>
						</for>
						
						<for var="property" in="additionalCrmValues">
							<if condition="property.Value.isSet">
								<set var="exContactData[property.Name]" if="property.Value ne ''">{property.Value}</set>
							</if>
						</for>
						
						<set var="canUpdateExContact">{true}</set>

						<!-- Link Exchange contact and update crmxml with processed Exchange data -->
						<if condition="canUpdateExContact">
							<update in="exchange" entity="contact">
								<where>
									<if condition="Settings.SyncMainFolderOnly eq false">
										<condition attr="@FolderName" op="eq">root/allitems</condition>
									</if>
									<condition attr="EntryId" op="eq">{excontact.EntryId}</condition>
								</where>
								<attr name="crmid">{crmContact.contactid.ToString()}</attr>
								<!-- <attr name="crmLinkState">{2}</attr> -->
								<attr name="crmLinkState_vs360">{2}</attr>
								<attr name="iconindex">{514}</attr>
								<attr name="crmxml_vs360">{Xml.ToXml(exContactData, "contact")}</attr>
								<attr name="companyname" if="CheckEmailDomainResults.Account.isSet">{CheckEmailDomainResults.Account.Name}</attr>
							</update>
						</if>
						
						<log>Existing contacts have been linked in Exchange and Crm: {excontact}. Updating relationship record</log>
						<context for="crm" user="{Employee.UserId}">
							<update in="crm" entity="vs360_relationship">
								<where>
									<condition attr="vs360_relationshipid" op="eq">{crmContact.vs360_relationshipid}</condition>
								</where>
								<attr name="vs360_deletedinoutlook">{0}</attr>
								<attr name="vs360_syncwithoutlook">{true}</attr>
							</update>
						</context>
					</if>
				</if>
			</for>
			
		</context>
	</if>
	<onerror var="ex">
		<log>Synchronization Failed: {ex}</log>
		<!--<FailSynchronization SyncState="SyncState" Exception="ex"/>-->
	</onerror>
	</sandbox>
	
</script>