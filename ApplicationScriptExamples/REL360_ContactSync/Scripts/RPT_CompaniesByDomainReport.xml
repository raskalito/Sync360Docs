<script>
	<!--  ******************************* -->
	<!--   SCRIPT CONFIGURATION SECTION   -->
	<!--  ******************************* -->
	<!--   Examine/evaluate carefully     -->
	<!--   prior to running script.       -->
	<!--  *******************************   -->

	<!-- Run Configuration attributes -->
	<var BlockInfo="new Object()"/>
	<set var="BlockInfo.Title">Companies By Domain Report</set>
	<set var="BlockInfo.Mode">Start</set>
	<DisplayStartEndBlock BlockInfo="BlockInfo"/>

	<!-- SET SYSTEM REFERENCE VARIABLES -->
	<set var="CRM">crm</set>
	<set var="Exchange">notset</set>
	<include name="TimeStampAsText"/>
	<set var="CompaniesByDomainFile">C:\Temp\Sync360Output\CompaniesByDomain-{TimeStampAsText}.csv</set>
	
	<!-- Processing Variables -->
	<set var="IncludeProhibitedDomains">{true}</set>
		
	<!--  *********************************** -->
	<!--   END SCRIPT CONFIGURATION SECTION   -->
	<!--  *********************************** -->

	<!-- Load Prohibited Domains List -->
	<!--<include name="nonCorpDomainsList" />-->

	<!-- Load Company/Contact -->
	<log>Reading Company/Contact Data...</log>
	<select from="{CRM}" entity="account" var="companies">
		<join type="leftouter" entity="contact" to="accountid" from="parentcustomerid" as="ContactAssoc">
			<attr name="emailaddress1" as="ContactEmail"/>
			<where>
				<condition attr="emailaddress1" op="ex"/>
			</where>
		</join>
		<attr name="accountid"/>
		<attr name="name"/>
		<attr name="address1_city"/>
		<attr name="address1_stateorprovince"/>
		<attr name="websiteurl"/>
		<attr name="accountnumber"/>
		<order by="name" desc="false"/>
    </select>
	
	<if condition="companies.Count lt 1">
        <then>
            <log>	NO COMPANIES FOUND!</log>
        </then>
        <else>
            <log>	{companies.Count} company/contact combinations found for processing.</log>
			<!-- Create domain data for each contact and overall domain list -->
			<set domDict="new Dictionary()"/>
			<set var="counter">{0}</set>
			
			<for var="rec" in="companies">
				<set var="counter">{counter + 1}</set>
				<log>Loading company {counter} of {companies.Count}...</log>
				
				<if condition="rec.ContactEmail.isSet">
                    <set var="domain">{Utils.ToLower(Utils.Split(rec.ContactEmail,'@')[1]) ?? null}</set>
					<if condition="domain.isSet">
						<!-- *********************  START: GET COMPANY INFO ***************************** -->
						<!-- Get Opportunities Count for this company -->
						<select from="{CRM}" entity="opportunity" var="opps">
							<where>
								<condition attr="accountid" op="eq">{rec.accountid}</condition>
							</where>
						</select>
						
						<!-- Get Project Leads Count for this company -->
						<select from="{CRM}" entity="vs360_joblead" var="leads">
							<where>
								<condition attr="vs360_accountid" op="eq">{rec.accountid}</condition>
							</where>
						</select>
						
						<!-- Get Jobs Count for this company -->
						<select from="{CRM}" entity="vs360_job" var="jobs">
							<where>
								<condition attr="vs360_accountid" op="eq">{rec.accountid}</condition>
							</where>
						</select>
					
						<set var="Company">
							<attr name="CompanyID">{rec.accountid.ToString()}</attr>
							<attr name="CompanyName">{rec.name}</attr>
							<attr name="CompanyCity">{rec.address1_city}</attr>
							<attr name="CompanyState">{rec.address1_stateorprovince}</attr>
							<attr name="AccountNumber">{rec.accountnumber}</attr>
							<attr name="OpportunitiesCount">{opps.Count ?? 0}</attr>
							<attr name="LeadsCount">{leads.Count ?? 0}</attr>
							<attr name="JobsCount">{jobs.Count ?? 0}</attr>
						</set>
						<!-- *********************  END: GET COMPANY INFO ***************************** -->

						<!-- See if domain entry exists -->
						<if condition="domDict.ContainsKey(domain)">
							<then>
								<!-- Add new Company record to existing domain entry -->
								
								<set var="domCMPs">{domDict[domain].DomainEntry}</set>
								
								<if condition="!domCMPs.ContainsKey(rec.accountid.ToString())">
									<!-- Only add another company entry if it does not already exist in this domain -->
									<set var="domCMPs[rec.accountid.ToString()]">{Company}</set>
									
									<set var="Domain">
										<attr name="DomainName">{domain}</attr>
										<attr name="DomainEntry">{domCMPs}</attr>
									</set>
									<set var="domDict[domain]">{Domain}</set>
								</if>
							</then>
							<else>
								<!-- Add new Domain Record and then add new Company record -->
								<set domCMPs="new Dictionary()"/>
								<!--<set var="Company">
									<attr name="CompanyID">{rec.accountid.ToString()}</attr>
									<attr name="CompanyName">{rec.name}</attr>
								</set>-->
								<set var="domCMPs[rec.accountid.ToString()]">{Company}</set>

								<set var="Domain">
									<attr name="DomainName">{domain}</attr>
									<attr name="DomainEntry">{domCMPs}</attr>
								</set>
								<set var="domDict[domain]">{Domain}</set>
							</else>
						</if>
					
					</if>
                </if>
            </for>
			
			<log>Building Report...</log>
			<set>{FileUtils.WriteToFile(CompaniesByDomainFile, "Domain,CompanyID,CompanyName,AccountNumber,City,State,OpportunitiesCount,LeadsCount,JobsCount", false)}</set>
			
			<!-- List Companies for each domain -->
			<for var="dom" in="domDict">
				<set var="cmps">{dom.Value.DomainEntry}</set>
				
				<if condition="IncludeProhibitedDomains eq true or (IncludeProhibitedDomains eq false and !nonCorpDomains.Contains(dom.Key))">
				
					<if condition="cmps.Count gt 1">
						<for var="cmp" in="cmps">
							<set var="dataLine">{dom.Key},{cmp.Value.CompanyID},{cmp.Value.CompanyName.Replace(",","")},{cmp.Value.AccountNumber},{cmp.Value.CompanyCity},{cmp.Value.CompanyState},{cmp.Value.OpportunitiesCount},{cmp.Value.LeadsCount},{cmp.Value.JobsCount}</set>
							<set>{FileUtils.WriteToFile(CompaniesByDomainFile, dataLine, true)}</set>
							<log>   {dataLine}</log>
						</for>
					</if>
					
				</if>
				
			</for>
			
		</else>
    </if>
	
	<set var="BlockInfo.Mode">End</set>
	<DisplayStartEndBlock BlockInfo="BlockInfo"/>	
	
</script>