<script>
	<!--  ******************************* -->
	<!--   SCRIPT CONFIGURATION SECTION   -->
	<!--  ******************************* -->
	<!--   Examine/evaluate carefully     -->
	<!--   prior to running script.       -->
	<!--  ******************************* -->

	<var BlockInfo="new Object()"/>
	<set var="BlockInfo.Title">Contact Domains Report</set>
	<set var="BlockInfo.Mode">Start</set>
	<DisplayStartEndBlock BlockInfo="BlockInfo"/>

	<!-- Data sources and output files -->
	<set var="CRM">crm</set>
	<set var="Exchange">exchange</set>
    <set var="TimeStampAsText">{Utils.Now.ToString('yyyy-MM-dd-hh-mm')}</set>
	<set var="DomainsReportFile">C:\Temp\REL360Output\ContactDomainsReport-{TimeStampAsText}.csv</set>  <!-- Output file path & name -->
	
	<!-- Run Configuration attributes -->
	<set var="IncludeProhibitedDomains">{false}</set>
	<set var="ExcludeInactiveContacts">{true}</set>
	<set var="CleanupCompaniesByContactsCount">{true}</set>
	<!--<set var="teamId">6DC8F59E-182C-EB11-A813-000D3A8B69FB</set>--> <!-- Client's Main Team (DVS -->
	<set var="teamId">FB8382C1-4458-EC11-844F-000C29D3AE31</set> <!-- Client's Main Team -->
	<set var="mode">Team</set> <!-- Team or EmailList (Exchange) [List is below in code at beginning of Exchange processing] -->
	
	<!-- Data Variables -->
	<set var="DataStorage">{new Dictionary()}</set>
	<set var="ExDataStorage">{new Dictionary()}</set>
	<set var="emailList">{new List()}</set>
	
	<!--  *********************************** -->
	<!--   END SCRIPT CONFIGURATION SECTION   -->
	<!--  *********************************** -->

	
	<set Context="new Object()" Context.NonCorpDomains="null"/>
	
	
	<!-- INCLUDES -->
	<GetNonCorpDomains Context="Context"/>

	<!-- Load Contacts -->
	<log>Reading Contact Data...</log>
	<select from="{CRM}" entity="contact" var="CrmContacts">
        <where>
			<if condition="ExcludeInactiveContacts">
                <condition attr="statecode" op="eq">{0}</condition>
            </if>
            <condition attr="emailaddress1" op="co">@</condition>
            <!--<condition attr="parentcustomerid" op="ex" />-->
        </where>
        <attr name="emailaddress1" as="ContactEmail"/>
        <attr name="parentcustomerid"/>
		<order by="parentcustomerid" desc="true"/>
    </select>
	
	
	<for var="contact" in="CrmContacts">
        <set var="domain">{Utils.Split(contact.ContactEmail, "@")[1].ToLower()}</set>
		
		<continue if="IncludeProhibitedDomains eq false and Context.NonCorpDomains.Contains(domain)" /> 
		
		<set var="DataStorage[domain]" if="!DataStorage.ContainsKey(domain)">{new Dictionary()}</set>
		
		<set var="companyId">{contact.parentcustomerid.Id.ToString() ?? ''}</set>
        <set var="companyName">{contact.parentcustomerid.Name ?? ''}</set>
		
		<set var="DataStorage[domain][companyId]" if="!DataStorage[domain].ContainsKey(companyId)">
			<attr name="CrmCompanyName">{companyName}</attr>
			<attr name="ExchangePotentialCompanyNames"></attr>
			<attr name="CrmContactsCount">{0}</attr>
			<attr name="ExchangeContactsCount">{0}</attr>
		</set>
		
		<set var="DataStorage[domain][companyId].CrmContactsCount">{DataStorage[domain][companyId].CrmContactsCount + 1}</set>
    </for>
	
	
	<!--leave companies with the maximum number of contacts by domain-->
	<if condition="CleanupCompaniesByContactsCount">
        <for var="rec" in="DataStorage">
			<set var="companies">{rec.Value}</set>
			
			<!--1. FIND MAX COUNT-->
			<set var="maxContactsCount">{0}</set>
			<for var="company" in="companies">
				<set var="maxContactsCount" if="maxContactsCount lt company.Value.CrmContactsCount">{company.Value.CrmContactsCount}</set>
			</for>
			
			
			<!--2. Find LOOSERS-->
			<set var="loosersList">{new List()}</set>
			<for var="company" in="companies">
				<set var="loosersList[]" if="company.Value.CrmContactsCount lt maxContactsCount">{company.Key}</set>
			</for>
			
			<!--3. DELETE LOOSERS FROM DATA STORAGE-->
			<for var="looser" in="loosersList">
				<set>{companies.Remove(looser)}</set>
			</for>
		</for>
    </if>
			
						
	<!-- ********************************** -->
	<!-- Process Domains for Exchange Users -->
	<!-- ********************************** -->
	<!-- Process Modes -->
	<!-- Mode EmailList - Get user emails from this list -->
	<if condition="mode eq 'EmailList'">
		<set var="emailList[]">user.name@clientdomain.com</set>
	</if>
	
	<!-- Mode Team - Get user emails from team members -->
	<if condition="mode eq 'Team'">
		<if condition="!teamId.isSet or (teamId.isSet and teamId eq '')">
			<exception>TeamId is required</exception>
		</if>
		<sandbox>
			<!-- Select employee ids from team -->
			<select from="{CRM}" entity="vs360_vs360_employee_team" var="teammemberships"  > <!--count="10"-->
				<where>
					<condition attr="teamid" op="eq">{teamId}</condition>
				</where>
				<join type="inner" entity="vs360_employee" to="vs360_employeeid" from="vs360_employeeid">
					<where>
						<condition attr="emailaddress" op="ex"></condition>
					</where>
					<attr name="vs360_name" as="vs360_name"/>
					<attr name="emailaddress" as="emailaddress"/>
				</join>
				<attr name="vs360_employeeid"/>
			</select>
			<if condition="teammemberships.Count eq 0">
				<exception>No employees in CRM Team ({teamId})</exception>
			</if>
			<if condition="teammemberships.Count gt 0">
				<for var="teammembership" in="teammemberships">
					<set var="emailList[]">{Utils.ToLower(teammembership.emailaddress)}</set>
				</for>
			</if>
		</sandbox>
	</if>
	<log>{emailList.Count} Mailboxes loaded for processing.</log>
	
	
	
	<!-- Process each emailbox in list -->
	<for var="emailbox" in="emailList">
		<sandbox>
			<log>Processing mailbox: {emailbox}</log>
			<context for="{Exchange}" user="{emailbox}">
				<select from="{Exchange}" entity="contact" var="UserContacts">
					<where>
						<condition attr="email1address" op="co">@</condition>
                    </where>
					<attr name="companyname"/>
					<attr name="email1address"/>
					<attr name="email1displayname"/>
					<attr name="email2address"/>
					<attr name="email2displayname"/>
					<attr name="email3address"/>
					<attr name="email3displayname"/>
				</select>
			</context>
			<log>   Processing {UserContacts.Count} for mailbox {emailbox}</log>
			
			<for var="cnt" in="UserContacts">
				<set var="companyName">{cnt.companyname.Trim() ?? null}</set>
				
				<set ValidationResult="new Object()" ValidationResult.isInvalid="false" />
				<ProcessX500Emailaddress exContact="cnt" Output="ValidationResult" />
				<continue if="ValidationResult.isInvalid" />
				
				<set var="domain">{Utils.Split(cnt.email1address,'@')[1].ToLower()}</set>
				<continue if="IncludeProhibitedDomains eq false and Context.NonCorpDomains.Contains(domain)" /> 
				
				<set var="ExDataStorage[domain]" if="!ExDataStorage.ContainsKey(domain)">
					<attr name="CompanyNames">{new Dictionary()}</attr>
					<attr name="ContactsCount">{0}</attr>
				</set>
				
				<set var="ExDataStorage[domain].CompanyNames[companyName.ToLower()]" if="companyName.isSet">{companyName}</set>
				<set var="ExDataStorage[domain].ContactsCount">{ExDataStorage[domain].ContactsCount + 1}</set>
				
			</for>

		</sandbox>
	
	</for>
	
	<!--MERGE DATA STORAGE AND EXCHANGE DATA STORAGE-->
	
	<for var="exDataKvp" in="ExDataStorage">
        <set var="domain">{exDataKvp.Key}</set>
        <set var="exData">{exDataKvp.Value}</set>
		
		<set var="domainCompanies">{Utils.Join(exData.CompanyNames.Values, ';')}</set>
		
		<if condition="!DataStorage.ContainsKey(domain)">
            <set var="DataStorage[domain]">{new Dictionary()}</set>
			<set var="DataStorage[domain]['']">
				<attr name="CrmCompanyName"></attr>
				<attr name="ExchangePotentialCompanyNames"></attr>
				<attr name="CrmContactsCount">{0}</attr>
				<attr name="ExchangeContactsCount">{0}</attr>
			</set>
        </if>
		
		<for var="companiesData" in="DataStorage[domain]">
            <set var="companiesData.Value.ExchangePotentialCompanyNames">{domainCompanies}</set>
            <set var="companiesData.Value.ExchangeContactsCount">{exData.ContactsCount}</set>
        </for>	
		
    </for>
	
	<set var="csvData">{new List()}</set>
	
	<for var="domainItem" in="DataStorage">
        <set var="domain">{domainItem.Key}</set>
		<set var="companies">{domainItem.Value}</set>
		<for var="companyItem" in="companies">
			<set var="companyId">{companyItem.Key}</set>
			<set var="companyData">{companyItem.Value}</set>
			
            <set var="csvRow">{new Dictionary()}</set>
			<set var="csvRow['Domain']">{domain}</set>
			<set var="csvRow['CrmCompanyName']">{companyData.CrmCompanyName}</set>
			<set var="csvRow['CrmCompanyID']">{companyId}</set>
			<set var="csvRow['ExchangePotentialCompanyNames']">{companyData.ExchangePotentialCompanyNames}</set>
			<set var="csvRow['CRMContactsCount']">{companyData.CrmContactsCount}</set>
			<set var="csvRow['ExchangeContactsCount']">{companyData.ExchangeContactsCount}</set>
			
			<set var="csvData[]">{csvRow}</set>
        </for>
    </for>
	
	<set var="result">{Csv.Write(csvData, DomainsReportFile, Encoding.UTF8, ',', '"')}</set>
	
	<set var="BlockInfo.Mode">End</set>
	<DisplayStartEndBlock BlockInfo="BlockInfo"/>
	
</script>