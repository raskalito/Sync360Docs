<script>
	<!-- Run Configuration attributes -->
	<var BlockInfo="new Object()"/>
	<set var="BlockInfo.Title">Domains Grouped Report</set>
	<set var="BlockInfo.Mode">Start</set>
	<DisplayStartEndBlock BlockInfo="BlockInfo"/>

	<set var="CRM">crm</set>
	<set var="Exchange">exchangeOAuth</set>
	<var settings='new Object()'/>
	
	<!-- Include -->
	<GetSettings Settings="settings"/>
	<include name="EmailBlocklist" />
	<include name="CompanyBlocklist" />
	<include name="nonCorpDomainsList" />
	
	<!-- Vars -->
	<set var="UserMode">Employee</set> <!-- User or Employee or EmailList -->
	<set var="minContactsCount">{5}</set>
	
	<set var="TeamId">6DC8F59E-182C-EB11-A813-000D3A8B69FB</set> <!-- Main Team -->
	
	<!-- Fields mapping -->
	<var Mapping='["ContactMapping" : new List(), "ContactMultiLineMapping" : new List() ]'/>
	<ContactFieldsMapping Mapping="Mapping"/>
	
	<set var="DuplicatesDict">{new Dictionary()}</set>
	
	
	<!-- Get all users from team -->
	<if condition="UserMode eq 'User'">
		<select from="{CRM}" entity="teammembership" var="teammemberships">
			<where>
				<condition attr="teamid" op="eq">{TeamId}</condition>
			</where>
			<attr name="systemuserid"/>
		</select>
	</if>
	
	<!-- Get all employee from team -->
	<if condition="UserMode eq 'Employee'">
		<select from="{CRM}" entity="vs360_vs360_employee_team" var="teammemberships">
			<where>
				<condition attr="teamid" op="eq">{TeamId}</condition>
			</where>
			<attr name="vs360_employeeid"/>
		</select>
	</if>
	
	<!-- Populate email list -->
	<if condition="UserMode eq 'EmailList'">
		<set var="teammemberships">{new List()}</set>
		<set var="teammemberships[]">dlbrown@walterpmoore.com</set>
		<set var="teammemberships[]">grhodes@walterpmoore.com</set>
		<set var="teammemberships[]">sgauthier@walterpmoore.com</set>
		<set var="teammemberships[]">kbielish@walterpmoore.com</set>
		<set var="teammemberships[]">nmccarra@walterpmoore.com</set>
		<set var="teammemberships[]">tmagnusson@walterpmoore.com</set>
		<set var="teammemberships[]">vgauthier@walterpmoore.com</set>
		<set var="teammemberships[]">ashah@walterpmoore.com</set>
		<set var="teammemberships[]">aalexander@walterpmoore.com</set>
		<set var="teammemberships[]">dbrown@walterpmoore.com</set>
		<set var="teammemberships[]">dcoenen@walterpmoore.com</set>
		<set var="teammemberships[]">gtaylor@walterpmoore.com</set>
		<set var="teammemberships[]">ktomlinson@martinezmooreengineers.com</set>
		<set var="teammemberships[]">kjones@walterpmoore.com</set>
		<set var="teammemberships[]">mwilliams@walterpmoore.com</set>
		<set var="teammemberships[]">mrechtien@walterpmoore.com</set>
		<set var="teammemberships[]">rcraft@walterpmoore.com</set>
		<set var="teammemberships[]">tcartwright@walterpmoore.com</set>
		<set var="teammemberships[]">tbabetski@walterpmoore.com</set>
		<set var="teammemberships[]">jjacobi@walterpmoore.com</set>
		<set var="teammemberships[]">awelch@walterpmoore.com</set>
		<set var="teammemberships[]">GJIMENEZ@WALTERPMOORE.COM</set>
		<set var="teammemberships[]">tsanti@walterpmoore.com</set>
		<set var="teammemberships[]">kyoung@walterpmoore.com</set>
		<set var="teammemberships[]">mlarsen@walterpmoore.com</set>
		<set var="teammemberships[]">BHanuschak@walterpmoore.com</set>
		<set var="teammemberships[]">mnassar@walterpmoore.com</set>
		<set var="teammemberships[]">efriedrichs@walterpmoore.com</set>
		<set var="teammemberships[]">ldixon@walterpmoore.com</set>
		<set var="teammemberships[]">jpeek@walterpmoore.com</set>
		<set var="teammemberships[]">DHester@walterpmoore.com</set>
	</if>
	
	<set var="GroupedbyDomains">{new Dictionary()}</set>
	
	<for var="teammembership" in="teammemberships">
		
		<!-- Get user details from CRM -->
		<if condition="UserMode eq 'User'">
			<select from="{CRM}" entity="systemuser" var="processingobjects">
				<where>
					<condition attr="systemuserid" op="eq">{teammembership.systemuserid}</condition>
					<condition attr="isdisabled" op="eq">{false}</condition>
				</where>
				<attr name="systemuserid"/>
				<attr name="fullname"/>
				<attr name="internalemailaddress"/>
			</select>
		</if>
		
		<!-- Get employee details from CRM -->
		<if condition="UserMode eq 'Employee'">
			<select from="{CRM}" entity="vs360_employee" var="processingobjects">
				<where>
					<condition attr="vs360_employeeid" op="eq">{teammembership.vs360_employeeid}</condition>
				</where>
				<attr name="vs360_employeeid"/>
				<attr name="vs360_name"/>
				<attr name="emailaddress"/>
			</select>
		</if>
		
		<!-- Get email from list -->
		<if condition="UserMode eq 'EmailList'">
			<set var="processingobjects">{new List()}</set>
			<set var="processingobjects[]">{teammembership}</set>
		</if>
		
		<if condition="processingobjects.Count gt 0">
		
			<set var="User">{new Object()}</set>
			
			<set if="UserMode eq 'User'"
				User.Id="processingobjects[0].systemuserid"
				User.Email="processingobjects[0].internalemailaddress"
				User.Fullname="processingobjects[0].fullname"
				User.Type="'User'"/>
				
			<set if="UserMode eq 'Employee'"
				User.Id="processingobjects[0].vs360_employeeid"
				User.Email="processingobjects[0].emailaddress"
				User.Fullname="processingobjects[0].vs360_name"
				User.Type="'Employee'"/>
				
			<set if="UserMode eq 'EmailList'"
				User.Email="processingobjects[0]"
				User.Type="'Email'"/>
				
			<var email="User.Email" />
			
			
			<sandbox verbose="true">
			
				<log>{User.Email}</log>
				
				<!-- Execute in Exchange context -->
				<context for="{Exchange}" user="{User.Email}">
				
					<!-- Select contacts from Exchange -->
					<select from="{Exchange}" entity="contact" var="excontacts">
						<where>
							<for var="outCategory" in="settings.OptOutCategories">
							  <not>
								<condition attr="Keywords" op="eq">{outCategory}</condition>
							  </not>
							</for>
							<or>
							  <for var="inCategory" in="settings.OptInCategories">
								<condition attr="Keywords" op="eq">{inCategory}</condition>
							  </for>
							</or>
							<for var="bodyPrivateWord" in="settings.BodyPrivateWords">
							  <not>
								<condition attr="preview" op="co">{bodyPrivateWord}</condition>
							  </not>
							</for>
							<or>
								<condition attr="sensitivity" op="ne">2</condition>
								<not><condition attr="sensitivity" op="ex"/></not>
							</or>
							<condition attr="email1address" op="ex" />
							<include name="AdditionalConditions" />
						</where>
						<attr name="EntryId"/>
						<attr name="email1address" />
						<attr name="companyname"/>
					</select>
					
					<!-- Process found contacts -->
					<for var="c" in="excontacts">
						<set var="email">{c.email1address.ToLower().Trim()}</set>
						<set var="companyname"></set>
						<set var="companyname" if="c.companyname.isSet">{c.companyname.ToLower().Trim().Replace("&#xD;", "").Replace("&#xA;", "")}</set>
						<set var="companynameOrig" if="c.companyname.isSet">{c.companyname.Trim().Replace("&#xD;", "").Replace("&#xA;", "")}</set>
						<set var="atIndex">{email.IndexOf('@')}</set>
						<if condition="atIndex > -1">
							<set var="skip">{false}</set>
							<for var="b" in="blocklist">
								<if condition="email.Contains(b.ToLower())">
									<set var="skip">{true}</set>
								</if>
							</for>
							<if condition="!skip">
								<set var="emailDomain">{email.Substring(atIndex+1)}</set>
								<if condition="!nonCorpDomains.Contains(emailDomain)">
									<if condition="!GroupedbyDomains[emailDomain].isSet">
										<set var="GroupedbyDomains[emailDomain]">{new Dictionary()}</set>
										<set var="GroupedbyDomains[emailDomain]['contacts']">{new Dictionary()}</set>
										<set var="GroupedbyDomains[emailDomain]['companynamesOriginal']">{new List()}</set>
										<set var="GroupedbyDomains[emailDomain]['companynamesUnique']">{new List()}</set>
										<set var="GroupedbyDomains[emailDomain]['employees']">{new List()}</set>
									</if>
									<set var="GroupedbyDomains[emailDomain]['employees'][]" if="!GroupedbyDomains[emailDomain]['employees'].Contains(User.Email)">{User.Email}</set>
									<if condition="companyname ne ''">
										<set var="GroupedbyDomains[emailDomain]['companynamesOriginal'][]" if="!GroupedbyDomains[emailDomain]['companynamesOriginal'].Contains(c.companyname)">{companynameOrig}</set>
										<set var="GroupedbyDomains[emailDomain]['companynamesUnique'][]" if="!GroupedbyDomains[emailDomain]['companynamesUnique'].Contains(companyname)">{companyname}</set>
									</if>
									<if condition="!GroupedbyDomains[emailDomain]['contacts'][email].isSet">
										<set var="GroupedbyDomains[emailDomain]['contacts'][email]">{new Dictionary()}</set>    
										<set var="GroupedbyDomains[emailDomain]['contacts'][email]['employees']">{new List()}</set>    
										<set var="GroupedbyDomains[emailDomain]['contacts'][email]['count']">{0}</set>    
									</if>
									<set var="GroupedbyDomains[emailDomain]['contacts'][email]['count']">{GroupedbyDomains[emailDomain]['contacts'][email]['count'] + 1}</set>
									<set var="GroupedbyDomains[emailDomain]['contacts'][email]['employees'][]" if="!GroupedbyDomains[emailDomain]['contacts'][email]['employees'].Contains(User.Email)">{User.Email}</set>
								</if>
							</if>
						</if>
							
					</for>
				
				</context>
				
				<onerror var="ex">
					<log>Processing of {User.Email} failed. Error - {ex}</log>
				</onerror>
			
			</sandbox>
		
		</if>
		
	</for>
	
	<!-- Start of Total Summary log -->
	<log>Total Users processed: {teammemberships.Count}</log>
	
	<for var="domain" in="GroupedbyDomains.Keys">
		<if condition="GroupedbyDomains[domain]['contacts'].Count ge minContactsCount">
			<set var="contactsCount">{GroupedbyDomains[domain]['contacts'].Count}</set>
			<set var="companiesCount">{GroupedbyDomains[domain]['companynamesUnique'].Count}</set>
			<set var="employeesCount">{GroupedbyDomains[domain]['employees'].Count}</set>
			<set var="companies"></set>
			<for var="company" in="GroupedbyDomains[domain]['companynamesOriginal']">
				<set var="companies">{companies}"{company}",</set>
			</for>
			<set var="companies" if="companies.Length gt 1">{companies.Substring(0,companies.Length-1)}</set>
			<log>{domain}|{contactsCount}|{employeesCount}|{companiesCount}|{companies}</log>
			</if>
	</for>
	<log>----------------------------------------------------------------</log>
	<for var="domain" in="GroupedbyDomains.Keys">
		<if condition="GroupedbyDomains[domain]['contacts'].Count ge minContactsCount">
			<for var="email" in="GroupedbyDomains[domain]['contacts'].Keys">
				<set var="totalEmployees">{GroupedbyDomains[domain]['contacts'][email]['count']}</set>
				<set var="employees"></set>
				<for var="employee" in="GroupedbyDomains[domain]['contacts'][email]['employees']">
					<set var="employees">{employees}"{employee}",</set>
				</for>
				<set var="employees">{employees.Substring(0,employees.Length-1)}</set>
				<log>{email}|{totalEmployees}|{employees}</log>
			</for>
		</if>
	</for>
	<!-- End of Total Summary log -->

	<set var="BlockInfo.Mode">End</set>
	<DisplayStartEndBlock BlockInfo="BlockInfo"/>

</script>